{"version":3,"sources":["../../node_modules/object-assign/index.js","../../node_modules/assert/node_modules/util/support/isBufferBrowser.js","../../node_modules/assert/node_modules/inherits/inherits_browser.js","../../node_modules/process/browser.js","../../node_modules/assert/node_modules/util/util.js","../../node_modules/assert/assert.js","../main/api-types.ts","../main/issue-forest.ts","../../src/main/worker-interface.ts","../../src/main/bundler-worker-factory.ts","../../src/main/api-types.ts","../../src/main/minheap.ts","../../src/main/scheduling.ts","../../src/main/scheduling-async.ts","../main/util.ts","../main/scheduling.ts","../main/you-track-rest.ts","../main/you-track-oauth.ts","../main/you-track-http.ts","../main/you-track-project-planning.ts","../main/index.ts","demo.ts"],"names":["getOwnPropertySymbols","Object","hasOwnProperty","prototype","propIsEnumerable","propertyIsEnumerable","toObject","val","TypeError","shouldUseNative","assign","test1","String","getOwnPropertyNames","test2","i","fromCharCode","order2","map","n","join","test3","split","forEach","letter","keys","err","module","exports","target","source","from","symbols","to","s","arguments","length","key","call","cachedSetTimeout","cachedClearTimeout","process","defaultSetTimout","Error","defaultClearTimeout","runTimeout","fun","setTimeout","e","runClearTimeout","marker","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","concat","drainQueue","timeout","len","run","Item","array","noop","nextTick","args","Array","push","apply","title","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","name","binding","cwd","chdir","dir","umask","formatRegExp","format","f","isString","objects","inspect","str","replace","x","Number","JSON","stringify","_","isNull","isObject","deprecate","fn","msg","isUndefined","global","noDeprecation","warned","deprecated","throwDeprecation","traceDeprecation","console","trace","error","debugEnviron","debugs","obj","opts","ctx","seen","stylize","stylizeNoColor","formatValue","depth","colors","isBoolean","showHidden","_extend","customInspect","stylizeWithColor","styleType","style","styles","arrayToHash","hash","idx","value","recurseTimes","isFunction","constructor","ret","primitive","formatPrimitive","visibleKeys","isError","indexOf","formatError","isRegExp","RegExp","toString","isDate","Date","base","output","braces","isArray","toUTCString","formatArray","formatProperty","pop","reduceToSingleString","simple","isNumber","l","match","desc","getOwnPropertyDescriptor","get","set","line","substr","reduce","prev","cur","numLinesEst","ar","arg","isNullOrUndefined","isSymbol","re","objectToString","d","isPrimitive","o","pad","debuglog","toUpperCase","test","pid","isBuffer","require","months","timestamp","time","getHours","getMinutes","getSeconds","getDate","getMonth","prop","log","inherits","origin","add","isDedicatedWorkerGlobalScope","DedicatedWorkerGlobalScope","workerFactory","createWorker","Worker","JobSplitting","isSchedulingFailure","MinHeap","parentIdx","Math","trunc","leftChildIdx","rightChildIdx","swap","leftIdx","rightIdx","temp","heapify","comparatorFn","rootIdx","currentIdx","minIdx","r","iterable","comparatorFn_","array_","element","p","extractMin","undefined","min","isEmpty","JOB_DEFAULTS","freeze","deliveryTime","splitting","PREEMPTION","dependencies","releaseTime","preAssignment","computeSchedule","instance","nonNegativeInteger","number","isInteger","undefinedOrNonNegativeInteger","numMachines","machineSpeeds","numJobs","jobs","numbers","filter","positiveIntegers","job","size","undefinedOrNonNegativeIntegers","upperBoundExcl","undefinedOrIntegerWithinZeroTo","integersWithinZeroTo","minFragmentSize","ListScheduling","schedule","numMachines_","machineSpeeds_","jobs_","minFragmentSize_","gapsLists_","ignoredMachineSpeed","head","startTime","MIN_SAFE_INTEGER","endTime","tail","MAX_SAFE_INTEGER","nextTimeStamp","minWallClockTime","earliestStart","machine","currentGap","gapsList","currentFragmentStart","timeStamp","max","previousGapsList","adjustGaps","machineState","end","commitGaps","start","createJobFragment","scheduledJob","jobFragment","index","isWaiting","scheduleJob","availableMachineIndices","isPreemptible","currentSpeed","lastTimestamp","remainingSize","machines","availableIdx","speed","eventTime","ceil","machineEventTime","isProjectedEndTime","currentProjectedEndTime","nextGap","ignoredIndex","scheduleDeliveryTime","machineIdx","processingCompletionTime","completionTime","deliveryJobFragment","allMachines","callbackfn","singleMachine","singleMachineIdx","noDependencyNodes","jobGraphNodes","numDependencies","dependents","jobGraphNode","dependencyIdx","newSchedule","ignoredJob","finishTimes","numScheduledJobs","noDependencyNodesHeap","left","right","NONE","earliestStartTime","previousEarliestStartTime","dependencyFinishTime","availableMachines","deliveryMachineIdx","MULTIPLE_MACHINES","maxCompletionTime","currentAvailableMachines","currentCompletionTime","dependent","promise","computeScheduleAsync","worker","failure","Promise","reject","resolve","onmessage","event","result","data","onerror","terminate","filename","lineno","colno","message","postMessage"],"mappings":"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","file":"demo.7987bf13.js","sourceRoot":"../../src/demo","sourcesContent":["/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n'use strict';\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n","module.exports = function isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8 === 'function';\n}","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  // Allow for deprecating things in the process of starting up.\n  if (isUndefined(global.process)) {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  if (process.noDeprecation === true) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnviron;\nexports.debuglog = function(set) {\n  if (isUndefined(debugEnviron))\n    debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = require('./support/isBuffer');\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = require('inherits');\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n","'use strict';\n\nvar objectAssign = require('object-assign');\n\n// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js\n// original notice:\n\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\nfunction compare(a, b) {\n  if (a === b) {\n    return 0;\n  }\n\n  var x = a.length;\n  var y = b.length;\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i];\n      y = b[i];\n      break;\n    }\n  }\n\n  if (x < y) {\n    return -1;\n  }\n  if (y < x) {\n    return 1;\n  }\n  return 0;\n}\nfunction isBuffer(b) {\n  if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {\n    return global.Buffer.isBuffer(b);\n  }\n  return !!(b != null && b._isBuffer);\n}\n\n// based on node assert, original notice:\n// NB: The URL to the CommonJS spec is kept just for tradition.\n//     node-assert has evolved a lot since then, both in API and behavior.\n\n// http://wiki.commonjs.org/wiki/Unit_Testing/1.0\n//\n// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!\n//\n// Originally from narwhal.js (http://narwhaljs.org)\n// Copyright (c) 2009 Thomas Robinson <280north.com>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the 'Software'), to\n// deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n// sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar util = require('util/');\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar pSlice = Array.prototype.slice;\nvar functionsHaveNames = (function () {\n  return function foo() {}.name === 'foo';\n}());\nfunction pToString (obj) {\n  return Object.prototype.toString.call(obj);\n}\nfunction isView(arrbuf) {\n  if (isBuffer(arrbuf)) {\n    return false;\n  }\n  if (typeof global.ArrayBuffer !== 'function') {\n    return false;\n  }\n  if (typeof ArrayBuffer.isView === 'function') {\n    return ArrayBuffer.isView(arrbuf);\n  }\n  if (!arrbuf) {\n    return false;\n  }\n  if (arrbuf instanceof DataView) {\n    return true;\n  }\n  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {\n    return true;\n  }\n  return false;\n}\n// 1. The assert module provides functions that throw\n// AssertionError's when particular conditions are not met. The\n// assert module must conform to the following interface.\n\nvar assert = module.exports = ok;\n\n// 2. The AssertionError is defined in assert.\n// new assert.AssertionError({ message: message,\n//                             actual: actual,\n//                             expected: expected })\n\nvar regex = /\\s*function\\s+([^\\(\\s]*)\\s*/;\n// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js\nfunction getName(func) {\n  if (!util.isFunction(func)) {\n    return;\n  }\n  if (functionsHaveNames) {\n    return func.name;\n  }\n  var str = func.toString();\n  var match = str.match(regex);\n  return match && match[1];\n}\nassert.AssertionError = function AssertionError(options) {\n  this.name = 'AssertionError';\n  this.actual = options.actual;\n  this.expected = options.expected;\n  this.operator = options.operator;\n  if (options.message) {\n    this.message = options.message;\n    this.generatedMessage = false;\n  } else {\n    this.message = getMessage(this);\n    this.generatedMessage = true;\n  }\n  var stackStartFunction = options.stackStartFunction || fail;\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, stackStartFunction);\n  } else {\n    // non v8 browsers so we can have a stacktrace\n    var err = new Error();\n    if (err.stack) {\n      var out = err.stack;\n\n      // try to strip useless frames\n      var fn_name = getName(stackStartFunction);\n      var idx = out.indexOf('\\n' + fn_name);\n      if (idx >= 0) {\n        // once we have located the function frame\n        // we need to strip out everything before it (and its line)\n        var next_line = out.indexOf('\\n', idx + 1);\n        out = out.substring(next_line + 1);\n      }\n\n      this.stack = out;\n    }\n  }\n};\n\n// assert.AssertionError instanceof Error\nutil.inherits(assert.AssertionError, Error);\n\nfunction truncate(s, n) {\n  if (typeof s === 'string') {\n    return s.length < n ? s : s.slice(0, n);\n  } else {\n    return s;\n  }\n}\nfunction inspect(something) {\n  if (functionsHaveNames || !util.isFunction(something)) {\n    return util.inspect(something);\n  }\n  var rawname = getName(something);\n  var name = rawname ? ': ' + rawname : '';\n  return '[Function' +  name + ']';\n}\nfunction getMessage(self) {\n  return truncate(inspect(self.actual), 128) + ' ' +\n         self.operator + ' ' +\n         truncate(inspect(self.expected), 128);\n}\n\n// At present only the three keys mentioned above are used and\n// understood by the spec. Implementations or sub modules can pass\n// other keys to the AssertionError's constructor - they will be\n// ignored.\n\n// 3. All of the following functions must throw an AssertionError\n// when a corresponding condition is not met, with a message that\n// may be undefined if not provided.  All assertion methods provide\n// both the actual and expected values to the assertion error for\n// display purposes.\n\nfunction fail(actual, expected, message, operator, stackStartFunction) {\n  throw new assert.AssertionError({\n    message: message,\n    actual: actual,\n    expected: expected,\n    operator: operator,\n    stackStartFunction: stackStartFunction\n  });\n}\n\n// EXTENSION! allows for well behaved errors defined elsewhere.\nassert.fail = fail;\n\n// 4. Pure assertion tests whether a value is truthy, as determined\n// by !!guard.\n// assert.ok(guard, message_opt);\n// This statement is equivalent to assert.equal(true, !!guard,\n// message_opt);. To test strictly for the value true, use\n// assert.strictEqual(true, guard, message_opt);.\n\nfunction ok(value, message) {\n  if (!value) fail(value, true, message, '==', assert.ok);\n}\nassert.ok = ok;\n\n// 5. The equality assertion tests shallow, coercive equality with\n// ==.\n// assert.equal(actual, expected, message_opt);\n\nassert.equal = function equal(actual, expected, message) {\n  if (actual != expected) fail(actual, expected, message, '==', assert.equal);\n};\n\n// 6. The non-equality assertion tests for whether two objects are not equal\n// with != assert.notEqual(actual, expected, message_opt);\n\nassert.notEqual = function notEqual(actual, expected, message) {\n  if (actual == expected) {\n    fail(actual, expected, message, '!=', assert.notEqual);\n  }\n};\n\n// 7. The equivalence assertion tests a deep equality relation.\n// assert.deepEqual(actual, expected, message_opt);\n\nassert.deepEqual = function deepEqual(actual, expected, message) {\n  if (!_deepEqual(actual, expected, false)) {\n    fail(actual, expected, message, 'deepEqual', assert.deepEqual);\n  }\n};\n\nassert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {\n  if (!_deepEqual(actual, expected, true)) {\n    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);\n  }\n};\n\nfunction _deepEqual(actual, expected, strict, memos) {\n  // 7.1. All identical values are equivalent, as determined by ===.\n  if (actual === expected) {\n    return true;\n  } else if (isBuffer(actual) && isBuffer(expected)) {\n    return compare(actual, expected) === 0;\n\n  // 7.2. If the expected value is a Date object, the actual value is\n  // equivalent if it is also a Date object that refers to the same time.\n  } else if (util.isDate(actual) && util.isDate(expected)) {\n    return actual.getTime() === expected.getTime();\n\n  // 7.3 If the expected value is a RegExp object, the actual value is\n  // equivalent if it is also a RegExp object with the same source and\n  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).\n  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {\n    return actual.source === expected.source &&\n           actual.global === expected.global &&\n           actual.multiline === expected.multiline &&\n           actual.lastIndex === expected.lastIndex &&\n           actual.ignoreCase === expected.ignoreCase;\n\n  // 7.4. Other pairs that do not both pass typeof value == 'object',\n  // equivalence is determined by ==.\n  } else if ((actual === null || typeof actual !== 'object') &&\n             (expected === null || typeof expected !== 'object')) {\n    return strict ? actual === expected : actual == expected;\n\n  // If both values are instances of typed arrays, wrap their underlying\n  // ArrayBuffers in a Buffer each to increase performance\n  // This optimization requires the arrays to have the same type as checked by\n  // Object.prototype.toString (aka pToString). Never perform binary\n  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their\n  // bit patterns are not identical.\n  } else if (isView(actual) && isView(expected) &&\n             pToString(actual) === pToString(expected) &&\n             !(actual instanceof Float32Array ||\n               actual instanceof Float64Array)) {\n    return compare(new Uint8Array(actual.buffer),\n                   new Uint8Array(expected.buffer)) === 0;\n\n  // 7.5 For all other Object pairs, including Array objects, equivalence is\n  // determined by having the same number of owned properties (as verified\n  // with Object.prototype.hasOwnProperty.call), the same set of keys\n  // (although not necessarily the same order), equivalent values for every\n  // corresponding key, and an identical 'prototype' property. Note: this\n  // accounts for both named and indexed properties on Arrays.\n  } else if (isBuffer(actual) !== isBuffer(expected)) {\n    return false;\n  } else {\n    memos = memos || {actual: [], expected: []};\n\n    var actualIndex = memos.actual.indexOf(actual);\n    if (actualIndex !== -1) {\n      if (actualIndex === memos.expected.indexOf(expected)) {\n        return true;\n      }\n    }\n\n    memos.actual.push(actual);\n    memos.expected.push(expected);\n\n    return objEquiv(actual, expected, strict, memos);\n  }\n}\n\nfunction isArguments(object) {\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n}\n\nfunction objEquiv(a, b, strict, actualVisitedObjects) {\n  if (a === null || a === undefined || b === null || b === undefined)\n    return false;\n  // if one is a primitive, the other must be same\n  if (util.isPrimitive(a) || util.isPrimitive(b))\n    return a === b;\n  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))\n    return false;\n  var aIsArgs = isArguments(a);\n  var bIsArgs = isArguments(b);\n  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))\n    return false;\n  if (aIsArgs) {\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return _deepEqual(a, b, strict);\n  }\n  var ka = objectKeys(a);\n  var kb = objectKeys(b);\n  var key, i;\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (ka.length !== kb.length)\n    return false;\n  //the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n  //~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] !== kb[i])\n      return false;\n  }\n  //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))\n      return false;\n  }\n  return true;\n}\n\n// 8. The non-equivalence assertion tests for any deep inequality.\n// assert.notDeepEqual(actual, expected, message_opt);\n\nassert.notDeepEqual = function notDeepEqual(actual, expected, message) {\n  if (_deepEqual(actual, expected, false)) {\n    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);\n  }\n};\n\nassert.notDeepStrictEqual = notDeepStrictEqual;\nfunction notDeepStrictEqual(actual, expected, message) {\n  if (_deepEqual(actual, expected, true)) {\n    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);\n  }\n}\n\n\n// 9. The strict equality assertion tests strict equality, as determined by ===.\n// assert.strictEqual(actual, expected, message_opt);\n\nassert.strictEqual = function strictEqual(actual, expected, message) {\n  if (actual !== expected) {\n    fail(actual, expected, message, '===', assert.strictEqual);\n  }\n};\n\n// 10. The strict non-equality assertion tests for strict inequality, as\n// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);\n\nassert.notStrictEqual = function notStrictEqual(actual, expected, message) {\n  if (actual === expected) {\n    fail(actual, expected, message, '!==', assert.notStrictEqual);\n  }\n};\n\nfunction expectedException(actual, expected) {\n  if (!actual || !expected) {\n    return false;\n  }\n\n  if (Object.prototype.toString.call(expected) == '[object RegExp]') {\n    return expected.test(actual);\n  }\n\n  try {\n    if (actual instanceof expected) {\n      return true;\n    }\n  } catch (e) {\n    // Ignore.  The instanceof check doesn't work for arrow functions.\n  }\n\n  if (Error.isPrototypeOf(expected)) {\n    return false;\n  }\n\n  return expected.call({}, actual) === true;\n}\n\nfunction _tryBlock(block) {\n  var error;\n  try {\n    block();\n  } catch (e) {\n    error = e;\n  }\n  return error;\n}\n\nfunction _throws(shouldThrow, block, expected, message) {\n  var actual;\n\n  if (typeof block !== 'function') {\n    throw new TypeError('\"block\" argument must be a function');\n  }\n\n  if (typeof expected === 'string') {\n    message = expected;\n    expected = null;\n  }\n\n  actual = _tryBlock(block);\n\n  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +\n            (message ? ' ' + message : '.');\n\n  if (shouldThrow && !actual) {\n    fail(actual, expected, 'Missing expected exception' + message);\n  }\n\n  var userProvidedMessage = typeof message === 'string';\n  var isUnwantedException = !shouldThrow && util.isError(actual);\n  var isUnexpectedException = !shouldThrow && actual && !expected;\n\n  if ((isUnwantedException &&\n      userProvidedMessage &&\n      expectedException(actual, expected)) ||\n      isUnexpectedException) {\n    fail(actual, expected, 'Got unwanted exception' + message);\n  }\n\n  if ((shouldThrow && actual && expected &&\n      !expectedException(actual, expected)) || (!shouldThrow && actual)) {\n    throw actual;\n  }\n}\n\n// 11. Expected to throw an error:\n// assert.throws(block, Error_opt, message_opt);\n\nassert.throws = function(block, /*optional*/error, /*optional*/message) {\n  _throws(true, block, error, message);\n};\n\n// EXTENSION! This is annoying to write outside this module.\nassert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {\n  _throws(false, block, error, message);\n};\n\nassert.ifError = function(err) { if (err) throw err; };\n\n// Expose a strict only variant of assert\nfunction strict(value, message) {\n  if (!value) fail(value, true, message, '==', strict);\n}\nassert.strict = objectAssign(strict, assert, {\n  equal: assert.strictEqual,\n  deepEqual: assert.deepStrictEqual,\n  notEqual: assert.notStrictEqual,\n  notDeepEqual: assert.notDeepStrictEqual\n});\nassert.strict.strict = assert.strict;\n\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var key in obj) {\n    if (hasOwn.call(obj, key)) keys.push(key);\n  }\n  return keys;\n};\n","/**\n * Contributor to a project to whom work can be assigned.\n *\n * A contributor can have one or more members.\n */\nexport interface Contributor {\n  /**\n   * Identifier for this contributor. If the contributor exists in YouTrack as a user, this should be the\n   * YouTrack-internal ID (YouTrack REST API entity name\n   * [User](https://www.jetbrains.com/help/youtrack/standalone/api-entity-User.html)), so that issue assignees in\n   * YouTrack can be considered for scheduling.\n   */\n  id: string;\n\n  /**\n   * The number of minutes per week each member of this contributor is available.\n   */\n  minutesPerWeek: number;\n\n  /**\n   * The number of members in this group.\n   *\n   * By default, there is only a single member; that is, 1.\n   */\n  numMembers?: number;\n}\n\n/**\n * Human-readable error message that can be displayed to the user.\n */\nexport type Failure = string;\n\n/**\n * Returns whether the given value is a {@link Failure}.\n */\nexport function isFailure(value: any): value is Failure {\n  return typeof value === 'string';\n}\n\n/**\n * An issue activity is a time period in which work was or is scheduled to be performed on an issue.\n *\n * Timestamps are in milliseconds since January 1, 1970 00:00:00 UTC. That is, all timestamps are in real time (and not\n * relative to work time).\n */\nexport interface IssueActivity {\n  /**\n   * If the activity is in the past: YouTrack-internal ID of the assignee (YouTrack REST API entity name\n   * [User](https://www.jetbrains.com/help/youtrack/standalone/api-entity-User.html)) or, if there was no assignee,\n   * the empty string. If the activity is scheduled for the future: the contributor id {@link Contributor.id}.\n   */\n  assignee: string;\n\n  /**\n   * The start timestamp of the activity (including).\n   */\n  start: number;\n\n  /**\n   * The end timestamp of the activity (excluding).\n   *\n   * If the issue activity has no scheduled end, this property is `Number.MAX_SAFE_INTEGER`.\n   */\n  end: number;\n\n  /**\n   * Whether this activity represents wait time.\n   *\n   * If true, this activity does not prevent other issues from being assigned concurrently to the same assignee.\n   * However, any dependent issue can only start once all work on this issue has finished and all wait time has elapsed.\n   */\n  isWaiting: boolean;\n}\n\n/**\n * Node in an issue tree (or forest).\n *\n * In an issue tree (or forest), there is a one-to-one correspondence between {@link SchedulableIssue} objects and\n * {@link IssueNode} objects. Parent-child and dependency relationships are “lifted” to {@link IssueNode}. That is, the\n * dependencies of an {@link IssueNode} `a` are just those nodes that correspond to the issues referenced by\n * `a.issue.dependencies`.\n *\n * See also {@link makeForest}().\n */\nexport interface IssueNode<T extends SchedulableIssue> {\n  /**\n   * Index of {@link issue} in the underlying (flat) array that was used to create this tree.\n   */\n  index: number;\n\n  /**\n   * The issue corresponding to the current node.\n   */\n  issue: T;\n\n  /**\n   * The parent of the the current issue node, or `undefined` if this node is a root node.\n   */\n  parent?: IssueNode<T>;\n\n  /**\n   * Children of the current issue node.\n   */\n  children: IssueNode<T>[];\n\n  /**\n   * Dependencies of the current issue node.\n   */\n  dependencies: IssueNode<T>[];\n\n  /**\n   * Dependents of the current issue node.\n   */\n  dependents: IssueNode<T>[];\n}\n\n/**\n * An issue activity with one or more assignees.\n *\n * See {@link IssueActivity} and {@link groupByIntervalAndWaitStatus}().\n */\nexport interface MultiAssigneeIssueActivity extends Omit<IssueActivity, 'assignee'> {\n  /**\n   * Assignees for this issue activity, during the time interval from {@link IssueActivity.start} to\n   * {@link IssueActivity.end}.\n   *\n   * The same guarantees hold as for {@link IssueActivity.assignee}. Additionally, the array is non-empty.\n   */\n  assignees: string[];\n}\n\n/**\n * Callback for progress updates.\n *\n * @param ProgressCallback.percentageDone progress in percent; that is, a number (not necessarily integer) between\n *     0 and 100\n */\nexport type ProgressCallback = (percentageDone: number) => void;\n\n/**\n * A project plan.\n *\n * A project plan contains the current status of the issues in a YouTrack saved search. Additionally, it may also\n * contain the past project schedule reconstructed from the YouTrack activity log, and the future schedule computed from\n * YouTrack issue metadata plus the list of available contributors.\n */\nexport interface ProjectPlan {\n  /**\n   * Issues and their computed scheduling.\n   */\n  issues: YouTrackIssue[];\n\n  /**\n   * Warnings that may indicate incomplete or invalid data in YouTrack.\n   */\n  warnings: ProjectPlanWarning[];\n}\n\n/**\n * A warning concerning a project plan.\n */\nexport interface ProjectPlanWarning {\n  /**\n   * Human-readable warning message that can be displayed to the user.\n   */\n  description: string;\n\n  /**\n   * Issue identifier if the warning pertains to a specific issue, otherwise undefined.\n   */\n  issueId?: string;\n}\n\n/**\n * Options for retrieving YouTrack issue data and building a project plan.\n */\nexport interface RetrieveProjectPlanOptions {\n  /**\n   * Callback for progress updates.\n   *\n   * By default, there is no callback.\n   */\n  progressCallback?: ProgressCallback;\n\n  /**\n   * Whether issue activities should be omitted, in which case {@link YouTrackIssue.issueActivities} will be the empty\n   * array for all issues.\n   *\n   * Retrieving past issue activities is the most time-consuming part of reconstructing a project plan. If the activity\n   * information is not required, this option should therefore be set to `true`.\n   *\n   * By default, this is `false`; that is, issue activities *are* retrieved.\n   */\n  omitIssueActivities?: boolean;\n\n  /**\n   * Interval (in milliseconds) in which progress updates will be provided to the callback.\n   *\n   * By default, this is 200 milliseconds.\n   */\n  progressUpdateIntervalMs?: number;\n\n  /**\n   * Number of elements per HTTP request to array resources. See also {@link httpGetAll}().\n   *\n   * By default, this is 100.\n   */\n  restBatchSize?: number;\n}\n\n/**\n * An issue that can be scheduled.\n *\n * This interface contains all issue information relevant to its (future) scheduling.\n */\nexport interface SchedulableIssue {\n  /**\n   * Identifier.\n   *\n   * This corresponds to property `idReadable` of YouTrack REST API entity\n   * [Issue](https://www.jetbrains.com/help/youtrack/standalone/api-entity-Issue.html).\n   */\n  id: string;\n\n  /**\n   * The remaining ideal time (aka effort) for this issue, in milliseconds.\n   *\n   * The ideal time is relative to the regular work time. It *does not* include time for subissues. If this issue is a\n   * parent issue, this number is therefore typically different from the corresponding property stored in the issue\n   * tracker (where, by assumption, the remaining effort required for subissues *is* included in the remaining effort of\n   * the parent issue). If, in the issue tracker, the remaining effort is less than the total remaining effort of all\n   * subissues, the property in this interface is 0 (it is *never* negative).\n   */\n  remainingEffortMs: number;\n\n  /**\n   * The remaining wait time for this issue, in milliseconds.\n   *\n   * The wait time is relative to the regular work time. For example, if the regular work time is 40h/week, and the\n   * wait time is 16h, then this is 2 days in real time. This number is independent of the wait time of any subissues.\n   * (And it would *not* make sense to configure the issue tracker to sum or otherwise aggregate the wait time of\n   * subissues.)\n   *\n   * By default, there is no remaining wait time; that is, this property is 0.\n   */\n  remainingWaitTimeMs?: number;\n\n  /**\n   * Issue identifier (see {@link id}) of the parent issue.\n   *\n   * By default, the issue has no parent; that is, this property is the empty string.\n   */\n  parent?: string;\n\n  /**\n   * Whether this issue can be split across more than one person.\n   *\n   * By default, this is false.\n   */\n  splittable?: boolean;\n\n  /**\n   * Identifiers (see {@link id}) of the issues that this issue depends on.\n   *\n   * This includes only dependencies that are known.\n   *\n   * By default, there are no dependencies.\n   */\n  dependencies?: string[];\n\n  /**\n   * YouTrack-internal ID of the current assignee (YouTrack REST API entity name\n   * [User](https://www.jetbrains.com/help/youtrack/standalone/api-entity-User.html)), or empty string if none.\n   */\n  assignee?: string;\n}\n\n/**\n * A schedule for issues with remaining effort or wait time.\n */\nexport type Schedule = ScheduledIssue[];\n\n/**\n * Scheduled activities for an issue with remaining effort or wait time.\n *\n * The same guarantees hold as for {@link YouTrackIssue.issueActivities}.\n */\nexport type ScheduledIssue = IssueActivity[];\n\n/**\n * Options for scheduling issues with remaining effort or wait time.\n *\n * It’s important to distinguish:\n * - Elapsed time (aka duration). [Cohn (2006, “Agile Estimating and Planning”)](http://www.worldcat.org/oclc/935197594)\n *   defines this as “the amount of time that passes on a clock (or perhaps a calendar).”\n * - Ideal time (aka effort or work). This, in contrast, is the “amount of time that something takes when stripped of\n *   all peripheral activities” (ibid.). Ideal time also does not contain time off work (such as nights or weekend).\n *\n * It is further important to define whether a quantity is given relative to the:\n * - actual work time of a contributor (say, 20h/week in case of part-time),\n * - regular work time (say, 40h/week), or\n * - real time (aka elapsed or wall-clock time; that is, 7 * 24h/week).\n *\n * In practice, this usually only affects the conversion factors between hours and days (say, 8h/d or 24h/d), and\n * between days and weeks (say, 5d/week vs. 7d/week).\n *\n * Finally, there are different options for mapping from work time to real time:\n * - Using the contributors’s work schedule (say, Monday through Friday, between 9am and 5pm) as a step function. No\n *   activity is scheduled outside these time windows.\n * - Interpolation. Here, the simplified assumption is that work time is evenly distributed over the entire real week.\n *   While this choice is arguably less realistic, it has the benefit of simplicity, and is often still sufficient for\n *   estimation purposes.\n *\n * In this module, in the absence of further qualification, elapsed time is meant relative to real time (24h/d and\n * 7d/week), and ideal time is meant relative to regular work time (which is\n * [configurable in YouTrack](https://www.jetbrains.com/help/youtrack/standalone/resource-api-admin-timeTrackingSettings-workTimeSettings.html)).\n * This module uses interpolation to convert from work time to real time. (The ceiling function is used for any integer\n * conversion.)\n */\nexport interface SchedulingOptions {\n  /**\n   * Contributors between whom all work will be allocated.\n   */\n  contributors: Contributor[];\n\n  /**\n   * The number of minutes in a work week.\n   *\n   * This number defines the conversion factor between regular work time (say, 40h/week) and real time (7 * 24h/week).\n   *\n   * By default, this is 5d * 8h/d * 60min/h = 2400min.\n   */\n  minutesPerWeek?: number;\n\n  /**\n   * Resolution (in milliseconds) of the computed schedule. More precisely, the duration of one quantum (unit) of\n   * regular work time.\n   *\n   * The effect of this property is a quantization of time. Specifically, any elapsed time *relative to regular work\n   * time* is always a multiple of this setting.\n   *\n   * By default, this is 1 hour; that is, 3,600,000ms.\n   */\n  resolutionMs?: number;\n\n  /**\n   * Minimum ideal time (in multiples of {@link resolutionMs}) that each issue activity must have in order\n   * for the issue to be preemptable or splittable across more than one person.\n   *\n   * By default, this is 1.\n   */\n  minActivityDuration?: number;\n\n  /**\n   * Timestamp of the earliest point in time when unresolved issues with remaining effort or wait time can be scheduled.\n   *\n   * By default, the current time returned by `Date.now()` will be used.\n   */\n  predictionStartTimeMs?: number;\n}\n\n/**\n * Configuration of YouTrack.\n *\n * This defines the meaning of the\n * [YouTrack custom fields](https://www.jetbrains.com/help/youtrack/standalone/Custom-Fields.html) that pertain to\n * reconstructing a project plan from the activity log.\n */\nexport interface YouTrackConfig {\n  /**\n   * YouTrack-internal ID of the custom field (YouTrack REST API entity name\n   * [CustomField](https://www.jetbrains.com/help/youtrack/standalone/api-entity-CustomField.html)) that contains the\n   * state of an issue.\n   *\n   * The [field type](https://www.jetbrains.com/help/youtrack/standalone/Supported-Custom-Field-Types.html) must be\n   * `state`.\n   */\n  stateFieldId: string;\n\n  /**\n   * YouTrack-internal IDs of the unresolved states (YouTrack REST API entity name\n   * [StateBundleElement](https://www.jetbrains.com/help/youtrack/standalone/api-entity-StateBundleElement.html)) that\n   * should be considered inactive (that is, not being worked on).\n   */\n  inactiveStateIds: string[];\n\n  /**\n   * YouTrack-internal ID of the custom field that contains the remaining effort of an issue.\n   */\n  remainingEffortFieldId?: string;\n\n  /**\n   * YouTrack-internal ID of the custom field that contains the remaining wait time of an issue.\n   */\n  remainingWaitFieldId?: string;\n\n  /**\n   * YouTrack-internal ID of the custom field (YouTrack REST API entity name\n   * [CustomField](https://www.jetbrains.com/help/youtrack/standalone/api-entity-CustomField.html)) that contains the\n   * assignee of an issue.\n   *\n   * The [field type](https://www.jetbrains.com/help/youtrack/standalone/Supported-Custom-Field-Types.html) must be\n   * `user[1]`.\n   */\n  assigneeFieldId?: string;\n\n  /**\n   * Array of IDs of custom fields whose value should be included in the result.\n   *\n   * The values of these custom fields will be reported in {@link YouTrackIssue.customFields}. Currently, only\n   * single-value enum custom fields are supported. If an issue has no value for the custom field type (or a value that\n   * is not a single-value enum), the property will not be set in the result.\n   */\n  otherCustomFieldIds?: string[];\n\n  /**\n   * YouTrack-internal ID of the issue link type (YouTrack REST API entity name\n   * [IssueLinkType](https://www.jetbrains.com/help/youtrack/standalone/api-entity-IssueLinkType.html)) that\n   * establishes a finish-to-start dependency.\n   *\n   * Property {@link doesInwardDependOnOutward} determines the direction of the link type.\n   */\n  dependsLinkTypeId: string;\n\n  /**\n   * Whether the issue on the inward (target) side of the connection identified by {@link dependsLinkTypeId} depends on\n   * the issue on the outward (source) side.\n   *\n   * If this property is false, then it is the other way round.\n   *\n   * By default, this is true (which corresponds to the\n   * [YouTrack default setting](https://www.jetbrains.com/help/youtrack/standalone/Link-Issues.html) for the “Depend”\n   * issue link type).\n   */\n  doesInwardDependOnOutward?: boolean;\n\n  /**\n   * YouTrack-internal ID of the saved search whose issues will be retrieved.\n   *\n   * The order of the issues in the saved search is significant, as the list scheduling algorithm depends on it. Field\n   * {@link overlaySavedQueryId} can be used to override the order for a subset of the issues.\n   *\n   * Note that {@link ProjectPlan.issues} will follow the order of {@link savedQueryId} (with overlay).\n   */\n  savedQueryId: string;\n\n  /**\n   * YouTrack-internal ID of the saved search that contains an overlay order for a subset of the issues.\n   *\n   * As an example, suppose the issues in {@link savedQueryId} are A, B, C, D (in that order), and the issues in\n   * {@link overlaySavedQueryId} are F, D, E, B. In this case, issues E and F are ignored (because they are not\n   * contained in {@link savedQueryId}). The remaining issues B and D must appear in the overlay order, but any issue\n   * not in {@link overlaySavedQueryId} must be left in place. Consequently, the final order for the algorithm (and\n   * also in the output {@link ProjectPlan.issues}) is A, D, C, B.\n   */\n  overlaySavedQueryId?: string;\n\n  /**\n   * Duration (in milliseconds) below which a state change from active to inactive and back (or vice versa) is removed.\n   *\n   * For example, if `minStateChangeDurationMs` is 301, and the activity logs show that an issue was worked on between\n   * timestamp 100 and 400, and then again between timestamp 700 to 1000, then only one active period from 100 to 1000\n   * will actually be reported. On the other hand, if `minStateChangeDurationMs` is 901, then no active periods would be\n   * reported. If there is ambiguity whether to remove an inactive or active phase (as in the example), the inactive\n   * phase is removed.\n   */\n  minStateChangeDurationMs?: number;\n\n  /**\n   * The remaining effort (in milliseconds) for an unresolved issue where the custom field identified by\n   * {@link YouTrackConfig.remainingEffortFieldId} has no value.\n   *\n   * If the remaining effort for an issue has no value, a warning will be added to {@link ProjectPlan.warnings}.\n   *\n   * By default (if this property is undefined), this is 0.\n   */\n  defaultRemainingEffortMs?: number;\n\n  /**\n   * The remaining wait time (in milliseconds) for an unresolved issue where the custom field identified by\n   * {@link YouTrackConfig.remainingWaitFieldId} has no value.\n   *\n   * If the remaining wait time for an issue has no value, a warning will be added to {@link ProjectPlan.warnings}.\n   *\n   * By default (if this property is undefined), this is 0.\n   */\n  defaultWaitTimeMs?: number;\n\n  /**\n   * User-defined function that determines whether a given YouTrack issue is splittable across multiple persons.\n   *\n   * The function must not modify the issue given as argument.\n   *\n   * By default, no issue is splittable across multiple persons.\n   *\n   * @param issue the YouTrack issue\n   * @return whether the given issue is splittable\n   */\n  isSplittableFn?(issue: YouTrackIssue): boolean;\n}\n\n/**\n * A YouTrack issue and its scheduling.\n *\n * Timestamps are in milliseconds since January 1, 1970 00:00:00 UTC.\n *\n * Note that this interface inherits from Required<{@link SchedulableIssue}> (unfortunately, TypeDoc is unable to\n * interpret the extends clause of this class).\n */\nexport interface YouTrackIssue extends Required<SchedulableIssue> {\n  /**\n   * The issue summary (that is, title).\n   */\n  summary: string;\n\n  /**\n   * Issue activities; that is, periods in which the issue is active/scheduled.\n   *\n   * The activities are sorted by {@link IssueActivity.end}. If there are several issue activities with the same end\n   * timestamp but different assignees, the order among them is undefined (though deterministic). Issue activities with\n   * the same assignee are guaranteed to not overlap (assuming each activity is a half-closed interval that excludes its\n   * end timestamp). Moreover, if `a` and `b` are two activities with `a.assignee === b.assignee` and\n   * `a.end === b.start`, then they differ in {@link IssueActivity.isWaiting}.\n   *\n   * It is guaranteed that activities representing wait time (where {@link IssueActivity.isWaiting} is true) do not\n   * overlap with any other activities.\n   *\n   * Note that {@link groupByIntervalAndWaitStatus}() can be used if activities need to be grouped by interval.\n   */\n  issueActivities: IssueActivity[];\n\n  /**\n   * Timestamp when the issue was resolved, or `Number.MAX_SAFE_INTEGER` if it is unresolved.\n   *\n   * If an issue is resolved, then the inherited properties {@link SchedulableIssue.remainingEffortMs} and\n   * {@link SchedulableIssue.remainingWaitTimeMs} are both 0 (irrespective of their actual values in YouTrack).\n   */\n  resolved: number;\n\n  /**\n   * YouTrack-internal ID of the current state of the issue (YouTrack REST API entity name\n   * [StateBundleElement](https://www.jetbrains.com/help/youtrack/standalone/api-entity-StateBundleElement.html)), or\n   * empty string if the state field is not set.\n   */\n  state: string;\n\n  /**\n   * Dictionary of custom field values.\n   *\n   * The keys in this dictionary are (possibly a subset of) the elements in\n   * {@link YouTrackConfig.otherCustomFieldIds}. Each value is the ID of the enum bundle element (YouTrack REST API\n   * entity name\n   * [EnumBundleElement](https://www.jetbrains.com/help/youtrack/standalone/api-entity-EnumBundleElement.html)).\n   * If an issue has no value for a custom field, the entry is omitted from the dictionary.\n   */\n  customFields: {[id: string]: string};\n}\n","import { IssueNode, SchedulableIssue } from './api-types';\n\n/**\n * Creates an issue tree (or forest) representing the given issues, and returns an iterable over all root nodes.\n *\n * @typeparam T the issue type\n * @param issues Array of issues. The array is expected to be “closed” in the sense that a parent or dependency\n *     referenced by any of the issues is guaranteed to be contained in `issues`, too.\n * @return An iterable over all root nodes. The iterable will return the root nodes in the order they appeared in the\n *     array. Likewise, the children of each node (at any level) will be stored in input order.\n */\nexport function makeForest<T extends SchedulableIssue>(issues: T[]): Iterable<IssueNode<T>> {\n  const idToNode: Map<string, IssueNode<T>> = issues\n      .reduce((map, issue, index) => map.set(issue.id, {\n        index,\n        issue,\n        children: [],\n        dependencies: [],\n        dependents: [],\n      }), new Map<string, IssueNode<T>>());\n  // Creating array, so we later close over a simple data structure instead of a map.\n  const nodes: IssueNode<T>[] = Array.from(idToNode.values());\n  for (const node of nodes) {\n    const issue: T = node.issue;\n    const parentKey: string | undefined = issue.parent;\n    if (parentKey !== undefined && parentKey.length > 0) {\n      node.parent = idToNode.get(parentKey)!;\n      node.parent.children.push(node);\n    }\n\n    if (issue.dependencies !== undefined) {\n      for (const dependency of issue.dependencies) {\n        const dependencyNode: IssueNode<T> = idToNode.get(dependency)!;\n        dependencyNode.dependents.push(node);\n        node.dependencies.push(dependencyNode);\n      }\n    }\n  }\n  return {\n    * [Symbol.iterator]() {\n      for (const node of nodes[Symbol.iterator]()) {\n        if (node.parent === undefined) {\n          yield node;\n        }\n      }\n    },\n  };\n}\n\n/**\n * Traverses each of the given issue trees and invokes the given visitor functions.\n *\n * @typeparam T the issue type\n * @param rootNodes The root nodes of the trees making up the forest.\n * @param enterNode Visitor function that will be called on entering a node (that is, before any of its children have\n *     been visited).\n * @param enterNode.node The node that is currently being visited.\n * @param leaveNode Visitor function that will be called on leaving a node (that is, after all of its children have been\n *     visited).\n * @param leaveNode.node The node that is currently being visited.\n */\nexport function traverseIssueForest<T extends SchedulableIssue>(\n    rootNodes: Iterable<IssueNode<T>>,\n    enterNode: (node: IssueNode<T>) => void,\n    leaveNode: (node: IssueNode<T>) => void = () => { /* no-op */ }\n): void {\n  let currentIterator: Iterator<IssueNode<T>> = rootNodes[Symbol.iterator]();\n  const stack: [IssueNode<T>, Iterator<IssueNode<T>>][] = [];\n  while (true) {\n    const iteratorResult = currentIterator.next();\n    if (iteratorResult.done) {\n      if (stack.length === 0) {\n        break;\n      }\n      let node: IssueNode<T>;\n      [node, currentIterator] = stack.pop()!;\n      leaveNode(node);\n    } else {\n      const node: IssueNode<T> = iteratorResult.value;\n      enterNode(node);\n      if (node.children.length > 0) {\n        stack.push([node, currentIterator]);\n        currentIterator = node.children[Symbol.iterator]();\n      } else {\n        leaveNode(node);\n      }\n    }\n  }\n}\n","/**\n * Internal message interface between the worker and the master.\n *\n * None of this is public API.\n */\n\n/* API documentation barrier. */\n\nimport { SchedulingFailure } from './api-types';\nimport { computeSchedule } from './scheduling';\n\n// Ambient declarations.\n//\n// We do not rely on the TypeScript webworker library, because the current file is meant to be importable also by code\n// that requires the DOM library. However, Web Worker API and DOM are at present mutually exclusive.\n// https://github.com/Microsoft/TypeScript/issues/20595\n// Since the Web Worker API used in this file is extremely simple, we just make the declarations ourselves here.\n\ndeclare global {\n  /**\n   * A web worker’s global scope.\n   */\n  interface DedicatedWorkerGlobalScope {\n    /**\n     * EventHandler to be called when a message is sent to the worker using its `postMessage()` method.\n     */\n    onmessage: ((this: DedicatedWorkerGlobalScope, event: MessageEvent) => any) | null;\n\n    /**\n     * Sends a message to the main thread that spawned the worker.\n     *\n     * The web worker API specifies an optional second argument for postMessage(), which we do not use. Unfortunately,\n     * information on the web is not crystal clear on whether it should be possible to transfer (without copying) a\n     * plain JavaScript object from the worker to the thread that spawned it. In C++ terminology, this would be called\n     * move semantics.\n     *\n     * See for instance a discussion on\n     * [StackOverflow](https://stackoverflow.com/questions/33544994/pass-object-by-reference-from-to-webworker) or a\n     * related\n     * [issue of the TypeScript project on GitHub]\n     * (https://github.com/Microsoft/TypeScript/issues/25176#issuecomment-400117198).\n     *\n     * For now the answer is, however, very clear. It is not possible. Chrome 74 reports \"Value at index 0 does not have\n     * a transferable type\" if we were to set the `transfer` argument in the postMessage() invocation to `[plainObject]`\n     * (i.e., an array with a plain JavaScript object as only element).\n     */\n    postMessage(message: any): void;\n\n    /**\n     * Closes the worker from inside the worker itself.\n     */\n    close(): void;\n  }\n\n  /**\n   * The DedicatedWorkerGlobalScope constructor.\n   */\n  // tslint:disable-next-line:variable-name\n  let DedicatedWorkerGlobalScope: new() => DedicatedWorkerGlobalScope;\n}\n\n/**\n * Type guard that returns whether the given value is a {@link DedicatedWorkerGlobalScope}.\n */\nexport function isDedicatedWorkerGlobalScope(value: any): value is DedicatedWorkerGlobalScope {\n  return typeof DedicatedWorkerGlobalScope === 'function' && value instanceof DedicatedWorkerGlobalScope;\n}\n\n\n// Internal interfaces\n\n/**\n * Message from master to worker with all information to start processing.\n */\nexport type ComputeScheduleParameters = Parameters<typeof computeSchedule>;\n\n/**\n * Message from worker to master containing the result.\n */\nexport type ComputeScheduleReturnType = ReturnType<typeof computeSchedule>;\n\n/**\n * Factory for a web worker.\n *\n * The {@link Worker} constructor requires a script URL that is either absolute or relative *to the the domain* of the\n * current script. See: https://html.spec.whatwg.org/multipage/workers.html#dom-worker\n *\n * Unfortunately, the location of the current script is generally unknowable. Additionally, in case of the UMD\n * distribution of this module, the worker script is the simply the current script (for ease of distribution).\n * Otherwise, the worker script is in a separate file, and we expect a bundler to substitute the correct absolute URL at\n * build time.\n */\nexport interface WorkerFactory {\n  /**\n   * Creates and returns a new {@link Worker}, or a failure if an error occurs.\n   */\n  createWorker?: () => Worker | SchedulingFailure;\n}\n\nexport const workerFactory: WorkerFactory = {};\n","// Builders like Parcel substitute the constructor argument if it is a relative path.\nimport { workerFactory } from './worker-interface';\n\nworkerFactory.createWorker = () => new Worker('./worker.ts');\n","/**\n * Enumeration of the job-splitting options.\n */\nexport enum JobSplitting {\n  // Note that this is deliberately not a const enum. The TypeScript compiler inlines const enums, which means that the\n  // generated declaration file is *required* for compiling into valid JavaScript. However, the declaration file may not\n  // always be taken into consideration or even available. For example, the parcel bundler uses `transpileModule()` for\n  // TypeScript assets:\n  // https://github.com/parcel-bundler/parcel/blob/parcel-bundler%401.12.3/packages/core/parcel-bundler/src/assets/TypeScriptAsset.js#L46-L49\n  // However, `transpileModule()` is just a simple transform function:\n  // https://github.com/Microsoft/TypeScript/wiki/Using-the-Compiler-API#a-simple-transform-function\n  // It does not look at any imports at all:\n  // https://github.com/Microsoft/TypeScript/issues/5243\n\n  /**\n   * The job needs to be executed by a single machine en bloc (that is, with a single job fragment).\n   */\n  NONE = 'none',\n\n  /**\n   * The job needs to be executed by a single machine but it allows preemption; that is, its execution may be\n   * interrupted by other jobs.\n   */\n  PREEMPTION = 'preemption',\n\n  /**\n   * The job can be executed by multiple machines, and it also allows preemption.\n   */\n  MULTIPLE_MACHINES = 'multi',\n}\n\n/**\n * A job.\n */\nexport interface Job {\n  /**\n   * The processing requirement of a job (or, more succinctly, the job size).\n   *\n   * The actual *processing time* of a job (or job fragment) on a machine with speed `speed` is\n   * `Math.ceil(size / speed)`. This is the amount of time the machine is busy. In addition, a job may also have a\n   * delivery time. During that time, the machine is already available again and can process other jobs.\n   *\n   * If the job size is 0, the corresponding {@link ScheduledJob} will contain no {@link JobFragment} for *processing*\n   * this job. However, if {@link deliveryTime} is greater than 0, there would still be a job fragment for the delivery\n   * time (which starts at time 0).\n   *\n   * Jobs with both {@link size} and {@link deliveryTime} equal to 0 are explicitly allowed. They can be useful to\n   * specify a dependency between *sets* of jobs. For example, suppose `A` and `B` are disjoint sets of `n` and `m`\n   * jobs, respectively. Suppose each job in `B` depends on all jobs in `A`. However, instead of introducing `m * n`\n   * dependencies, it is easier to introduce a dummy job `c` with {@link size} and {@link deliveryTime} equal to 0 and\n   * with a dependency on each job in `A`. Moreover, each job in `B` depends on `c`. This way, only `m + n` dependencies\n   * are necessary to express the set-dependency.\n   */\n  size: number;\n\n  /**\n   * Delivery time of a job, independent of the machine that it is scheduled on.\n   *\n   * During the delivery time of a job, a machine is available again to process other jobs. However, no dependents of\n   * this job can start before the delivery time has elapsed.\n   *\n   * In the computed {@link Schedule}, a separate {@link JobFragment} will be created to represent the delivery time. If\n   * {@link splitting} is {@link JobSplitting.MULTIPLE_MACHINES}, then this job fragment will be assigned to the machine\n   * specified by {@link preAssignment} (or simply the first machine if that field is `undefined`).\n   *\n   * The default is no delivery time; that is, 0.\n   */\n  deliveryTime?: number;\n\n  /**\n   * Whether the job allows preemption or may be processed concurrently by more than one machine at a time.\n   *\n   * The default is {@link JobSplitting.PREEMPTION}.\n   */\n  splitting?: JobSplitting;\n\n  /**\n   * Indices of the jobs that this job depends on.\n   *\n   * Dependencies are finish-to-start; that is, a job cannot start before all job dependencies are fully completed\n   * (including any delivery time they may have).\n   *\n   * The default is no dependencies; that is, the empty array.\n   */\n  dependencies?: number[];\n\n  /**\n   * The earliest possible start time for this job.\n   *\n   * This constraint is in addition to {@link dependencies}.\n   *\n   * The default is none; that is, an earliest possible start time of 0.\n   */\n  releaseTime?: number;\n\n  /**\n   * Index of the machine that this job must be assigned to.\n   *\n   * If both this is set and {@link splitting} is {@link JobSplitting.MULTIPLE_MACHINES}, then this field only\n   * determines what machine the delivery time (if any) will be assigned to.\n   *\n   * The default is no pre-assignment.\n   */\n  preAssignment?: number;\n}\n\n/**\n * An instance of the scheduling problem solved by this module.\n */\nexport interface SchedulingInstance {\n  /**\n   * The speeds of the machines available for processing jobs.\n   *\n   * The length of this array determines the number of machines available.\n   */\n  machineSpeeds: number[];\n\n  /**\n   * The jobs that needs to be processed on one (or more) of the available machines.\n   *\n   * The dependency graph induced by {@link Job.dependencies} must be an acyclic graph.\n   */\n  jobs: Job[];\n\n  /**\n   * The minimum processing requirement that a job fragment must have.\n   *\n   * The default is 0 (that is, there is no effective minimum).\n   */\n  minFragmentSize?: number;\n}\n\n/**\n * A job fragment is a an assignment of a job (or part of it) to a machine at a specific time.\n */\nexport interface JobFragment {\n  /**\n   * The machine that this job fragment is scheduled to be executed by.\n   */\n  machine: number;\n\n  /**\n   * The wall clock start time for this job fragment.\n   */\n  start: number;\n\n  /**\n   * The wall clock end time for this job fragment.\n   */\n  end: number;\n\n  /**\n   * Whether this job fragment represents delivery time.\n   *\n   * If true, this job fragment does not prevent other jobs to be scheduled concurrently on the same machine. However,\n   * any dependent job can only execute once all processing of this job has been finished and the delivery time has\n   * elapsed.\n   */\n  isWaiting: boolean;\n}\n\n/**\n * A scheduled job consists of one or more job fragments.\n *\n * The job fragments are sorted by {@link JobFragment.end} and {@link JobFragment.machine} (in that order). Fragments on\n * the same machine are guaranteed to not overlap. Moreover, if `a` and `b` are two consecutive job fragments on the\n * same machine with `a.end === b.start`, then they differ in {@link JobFragment.isWaiting}.\n */\nexport type ScheduledJob = JobFragment[];\n\n/**\n * A schedule is an array of scheduled jobs.\n *\n * Machines are identified by their array index. For the result returned by {@link computeSchedule}(), there is a 1:1\n * correspondence between the jobs in {@link Schedule} and in {@link SchedulingInstance.jobs} (given as argument).\n */\nexport type Schedule = ScheduledJob[];\n\n/**\n * Describes a failure while computing a schedule in {@link computeSchedule}().\n */\nexport type SchedulingFailure = string;\n\n/**\n * Returns whether the given value is a {@link SchedulingFailure}.\n */\nexport function isSchedulingFailure(value: any): value is SchedulingFailure {\n  return typeof value === 'string';\n}\n","/**\n * A classical min-heap.\n */\n\n/** API documentation barrier */\n\n/**\n * Comparator function for the min-heap.\n */\nexport type Comparator<T> = (left: T, right: T) => number;\n\nfunction parentIdx(idx: number): number {\n  return Math.trunc((idx - 1) / 2);\n}\n\nfunction leftChildIdx(idx: number): number {\n  return 2 * idx + 1;\n}\n\nfunction rightChildIdx(idx: number): number {\n  return 2 * idx + 2;\n}\n\nfunction swap<T>(array: T[], leftIdx: number, rightIdx: number): void {\n  const temp = array[leftIdx];\n  array[leftIdx] = array[rightIdx];\n  array[rightIdx] = temp;\n}\n\nfunction heapify<T>(array: T[], comparatorFn: Comparator<T>, rootIdx: number) {\n  // Precondition: indices leftChildIdx(rootIdx) and rightChildIdx(rootIdx) are roots of heaps\n  let currentIdx = rootIdx;\n  do {\n    let minIdx = currentIdx;\n    const l = leftChildIdx(currentIdx);\n    if (l < array.length && comparatorFn(array[l], array[minIdx]) < 0) {\n      minIdx = l;\n    }\n    const r = rightChildIdx(currentIdx);\n    if (r < array.length && comparatorFn(array[r], array[minIdx]) < 0) {\n      minIdx = r;\n    }\n    if (minIdx === currentIdx) {\n      break;\n    }\n    swap(array, currentIdx, minIdx);\n    currentIdx = minIdx;\n  } while (true);\n}\n\n/**\n * A binary min-heap.\n *\n * @typeparam T the type of elements held in this min heap\n */\nexport default class MinHeap<T> {\n  private readonly comparatorFn_: Comparator<T>;\n  private readonly array_: T[];\n\n  constructor(iterable: Iterable<T>, comparatorFn: Comparator<T>) {\n    this.comparatorFn_ = comparatorFn;\n    this.array_ = Array.from(iterable);\n    for (let i = Math.trunc(this.array_.length / 2) - 1; i >= 0; --i) {\n      heapify(this.array_, this.comparatorFn_, i);\n    }\n  }\n\n  /**\n   * Inserts the given element into this min-heap.\n   *\n   * The runtime of this operation is O(log n).\n   *\n   * @param element the element to add\n   */\n  public add(element: T): void {\n    this.array_.push(element);\n    let currentIdx = this.array_.length - 1;\n    do {\n      const p = parentIdx(currentIdx);\n      if (currentIdx <= 0 || this.comparatorFn_(this.array_[p], this.array_[currentIdx]) < 0) {\n        break;\n      }\n      swap(this.array_, p, currentIdx);\n      currentIdx = p;\n    } while (true);\n  }\n\n  /**\n   * Retrieves and removes the minimum element of this min-heap.\n   *\n   * The runtime of this operation is O(log n).\n   *\n   * @return the minimum element or undefined if the min-heap is empty\n   */\n  public extractMin(): T | undefined {\n    if (this.array_.length === 0) {\n      return undefined;\n    } else if (this.array_.length === 1) {\n      return this.array_.pop();\n    }\n\n    const min = this.array_[0];\n    this.array_[0] = this.array_.pop()!;\n    heapify(this.array_, this.comparatorFn_, 0);\n    return min;\n  }\n\n  /**\n   * Returns whether this min-heap is empty.\n   */\n  public isEmpty(): boolean {\n    return this.array_.length === 0;\n  }\n}\n","/**\n * Algorithm for project planning. More precisely, *list scheduling* with support for machines running at different\n * speeds, optional preemption, optional splitting of jobs across machines, release dates, and delivery times.\n *\n * See README file for details.\n */\n\n/** API documentation barrier */\n\nimport { strict as assert } from 'assert';\nimport {\n  Job,\n  JobFragment,\n  JobSplitting,\n  Schedule,\n  ScheduledJob,\n  SchedulingFailure,\n  SchedulingInstance,\n} from './api-types';\nimport MinHeap from './minheap';\n\n/**\n * Type that consists of the union of all properties that are marked as optional through a question mark.\n *\n * Note that properties that have undefined in their domain, but no question mark next to the property name are *not*\n * included. Also note that, in strict compilation mode, TypeScript will add undefined to the domain of the property if\n * there is a question mark next to the property name.\n *\n * @typeparam T generic type parameter\n */\ntype OptionalPropertyNames<T extends {}> = {[K in keyof T]-?: {} extends {[_ in K]: T[K]} ? K : never}[keyof T];\ntype Defined<T> = T extends undefined ? never : T;\ntype OnlyOptionals<T extends {}> = {[K in OptionalPropertyNames<T>]: Defined<T[K]>};\n\nconst JOB_DEFAULTS = Object.freeze<OnlyOptionals<Job>>({\n  deliveryTime: 0,\n  splitting: JobSplitting.PREEMPTION,\n  dependencies: [],\n  releaseTime: 0,\n  preAssignment: -1,\n});\n\n/**\n * Runs the list scheduling algorithm on the given problem instance and returns the result.\n *\n * See [the project page](https://github.com/fschopp/project-planning-js) for more information on the algorithm.\n *\n * @param instance the problem instance\n * @return solution or a human-readable failure description if the problem instance is invalid (for example, has a\n *     cyclic dependency graph)\n */\nexport function computeSchedule(instance: SchedulingInstance): Schedule | SchedulingFailure {\n  const nonNegativeInteger = (number: number) => number >= 0 && Number.isInteger(number);\n  const positiveIntegers = (numbers: number[]) =>\n      numbers.filter((number) => number <= 0 || !Number.isInteger(number)).length === 0;\n  const undefinedOrNonNegativeInteger = (number: number | undefined) =>\n      number === undefined || nonNegativeInteger(number);\n  const undefinedOrNonNegativeIntegers = (...numbers: (number | undefined)[]) =>\n      numbers.filter((number) => !undefinedOrNonNegativeInteger(number)).length === 0;\n  const undefinedOrIntegerWithinZeroTo = (upperBoundExcl: number, number: number | undefined) =>\n      number === undefined || nonNegativeInteger(number) && number < upperBoundExcl;\n  const integersWithinZeroTo = (upperBoundExcl: number, numbers: number[]) =>\n      numbers.filter((number) => !(number >= 0 && nonNegativeInteger(number) && number < upperBoundExcl)).length === 0;\n\n  const numMachines: number = instance.machineSpeeds.length;\n  const numJobs: number = instance.jobs.length;\n\n  if (numMachines === 0) {\n    return 'At least one machine is required to compute a schedule.';\n  } else if (\n      !positiveIntegers(instance.machineSpeeds) ||\n      instance.jobs.filter((job) =>\n          !nonNegativeInteger(job.size) ||\n          !undefinedOrNonNegativeIntegers(job.deliveryTime, job.releaseTime) ||\n          !undefinedOrIntegerWithinZeroTo(numMachines, job.preAssignment) ||\n          (job.dependencies !== undefined && !integersWithinZeroTo(numJobs, job.dependencies))\n      ).length > 0 ||\n      !undefinedOrNonNegativeInteger(instance.minFragmentSize)\n  ) {\n    return 'All job processing times and machine speeds need to be non-negative integers. ' +\n        'All job dependency and pre-assignment indices need to be within bounds.';\n  }\n\n  const jobs: Required<Job>[] = instance.jobs.map((job) => Object.assign({}, JOB_DEFAULTS, job));\n  const minFragmentSize: number = instance.minFragmentSize === undefined ? 0 : instance.minFragmentSize;\n  return new ListScheduling(numMachines, instance.machineSpeeds, jobs, minFragmentSize).schedule;\n}\n\n/**\n * A gap in the schedule for a particular machine. A gap can be filled when scheduling subsequent jobs.\n */\ninterface Gap {\n  startTime: number;\n  endTime: number;\n}\n\n/**\n * Linked list of gaps.\n */\ninterface GapsList {\n  head: Gap;\n  tail: GapsList | null;\n}\n\n/**\n * A machine and associated data required by {@link ListScheduling.scheduleJob}().\n */\ninterface Machine {\n  /**\n   * Index in array of all machines.\n   *\n   * This is a value between 0 (inclusive) and the length of {@link SchedulingInstance.machineSpeeds} (exclusive).\n   */\n  readonly index: number;\n\n  /**\n   * Index in array of available machines for the current job.\n   */\n  readonly availableIdx: number;\n\n  /**\n   * Speed of the machine.\n   */\n  readonly speed: number;\n\n  /**\n   * Time when the current job fragment started on the machine, or null if the current job is not currently running on\n   * the machine.\n   */\n  currentFragmentStart: number | null;\n\n  /**\n   * Linked list of gaps.\n   *\n   * Whenever starting to schedule a job, this is initialized with a tail list of {@link ListScheduling.gapsLists_}.\n   */\n  gapsList: GapsList;\n\n  /**\n   * Node of the linked list of gaps before the current node (which is {@link gapsList}).\n   *\n   * This field is only needed to “commit” the insertion of job fragments by making changes to the gap list shared\n   * between scheduling of individual jobs.\n   */\n  previousGapsList: GapsList;\n}\n\n/**\n * Node in the job graph induced by the dependencies.\n */\ninterface JobGraphNode {\n  idx: number;\n  numDependencies: number;\n  dependents: JobGraphNode[];\n}\n\n/**\n * Abstraction for a collection of machines available for a job.\n */\ninterface AvailableMachineIndices {\n  readonly length: number;\n  forEach(callbackfn: (index: number, availableIdx: number) => void): void;\n  map<T>(callbackfn: (index: number, availableIdx: number) => T): T[];\n}\n\n/**\n * Internal class whose sole purpose is to store algorithm state, so it does not have to be inconveniently passed around\n * between functions.\n */\nclass ListScheduling {\n  public readonly schedule: Schedule | SchedulingFailure;\n\n  private readonly numMachines_: number;\n  private readonly machineSpeeds_: number[];\n  private readonly jobs_: Required<Job>[];\n  private readonly minFragmentSize_: number;\n\n  private readonly gapsLists_: GapsList[];\n\n  constructor(numMachines: number, machineSpeeds: number[], jobs: Required<Job>[], minFragmentSize: number) {\n    this.numMachines_ = numMachines;\n    this.machineSpeeds_ = machineSpeeds;\n    this.jobs_ = jobs;\n    this.minFragmentSize_ = minFragmentSize;\n\n    this.gapsLists_ = this.machineSpeeds_.map((ignoredMachineSpeed) => ({\n      head: {\n        startTime: Number.MIN_SAFE_INTEGER,\n        endTime: 0,\n      },\n      tail: {\n        head: {\n          startTime: 0,\n          endTime: Number.MAX_SAFE_INTEGER,\n        },\n        tail: null,\n      },\n    }));\n    this.schedule = this.computeSchedule();\n  }\n\n  /**\n   * Returns the next “event” for the given machine.\n   *\n   * This method has side-effects. It updates field {@link Machine.previousGapsList} and {@link Machine.gapsList} of the\n   * given machine.\n   */\n  private static nextTimeStamp(minWallClockTime: number, earliestStart: number, machine: Machine): number {\n    let currentGap: Gap = machine.gapsList.head;\n\n    assert(Number.isInteger(minWallClockTime) && Number.isInteger(earliestStart) &&\n        Number.isInteger(currentGap.startTime) && Number.isInteger(currentGap.endTime), 'Invalid arguments');\n\n    if (machine.currentFragmentStart === null) {\n      while (true) {\n        const timeStamp = Math.max(earliestStart, currentGap.startTime) + minWallClockTime;\n        if (timeStamp <= currentGap.endTime) {\n          return timeStamp;\n        }\n        assert(machine.gapsList.tail !== null, 'Invariant: last gap has endTime === Number.MAX_SAFE_INTEGER');\n        machine.previousGapsList = machine.gapsList;\n        machine.gapsList = machine.gapsList.tail!;\n        currentGap = machine.gapsList.head;\n      }\n    } else {\n      return currentGap.endTime;\n    }\n  }\n\n  /**\n   * Adjust the linked list of gaps to account for the newly scheduled job fragment.\n   *\n   * There are 4 cases to consider. The new job fragment either:\n   * 1. Fills out the current gap completely. In this case, the current gap needs to be removed\n   *    entirely.\n   * 2. Aligns with the start of the current gap, but ends before it. In this case, the start of the current gap is\n   *    changed to when the new job fragment ends.\n   * 3. Does not start with the current gap, but aligns with the end of it. In this case, the end of the current gap is\n   *    changed to when the job fragment starts.\n   * 4. If the current gap aligns with neither start nor end of the current gap, a new gap is inserted before the\n   *    current gap. It starts with the current gap and ends with the start of the job fragment. The start of the\n   *    current gap is then changed to the end of the job fragment.\n   *\n   * @param machineState State of the machine that the job fragment has been scheduled on.\n   * @param end end time of the job fragment\n   * @param commitGaps if true, then commit the updated gaps to the state that is shared across scheduling of individual\n   *     jobs\n   */\n  private adjustGaps(machineState: Machine, end: number, commitGaps: boolean): void {\n    assert(machineState.index >= 0 && machineState.index < this.numMachines_ &&\n        machineState.currentFragmentStart !== null && Number.isInteger(machineState.currentFragmentStart) &&\n        Number.isInteger(end) && machineState.currentFragmentStart <= end, 'Invalid arguments');\n\n    // machineState also points to state that is shared across scheduling of individual jobs. This shared state we must\n    // not modify if dryRun is true. We therefore cannot make modifications to the properties of\n    // machineState.previousGapsList or machineState.gap.\n\n    const start: number = machineState.currentFragmentStart!;\n    const currentGap = machineState.gapsList.head;\n\n    if (commitGaps) {\n      if (start === currentGap.startTime && end === currentGap.endTime) {\n        machineState.previousGapsList.tail = machineState.gapsList.tail;\n      } else if (start === currentGap.startTime) {\n        currentGap.startTime = end;\n      } else if (end === currentGap.endTime) {\n        currentGap.endTime = start;\n        machineState.previousGapsList = machineState.gapsList;\n        // Note that machineState.gapsList will be updated below.\n      } else {\n        machineState.previousGapsList.tail = {\n          head: {\n            startTime: currentGap.startTime,\n            endTime: start,\n          },\n          tail: machineState.gapsList,\n        };\n        currentGap.startTime = end;\n      }\n    }\n\n    if (end === currentGap.endTime) {\n      // Note that machineState.gapsList.tail === null would imply that the current gap is the last gap; that is,\n      // currentGap.endTime === Number.MAX_SAFE_INTEGER. But we are also in the case where (end === currentGap.endTime).\n      // Since we don't support schedules that long, it is safe to assert:\n      assert(machineState.gapsList.tail !== null, 'Expected currentGap.endTime < Number.MAX_SAFE_INTEGER');\n      machineState.gapsList = machineState.gapsList.tail!;\n    } else if (!commitGaps) {\n      machineState.gapsList = {\n        head: {\n          startTime: end,\n          endTime: currentGap.endTime,\n        },\n        tail: machineState.gapsList.tail,\n      };\n    }\n\n    // Upon return, we will be \"before\" the gap represented by machineState.gapsList.head.\n    machineState.currentFragmentStart = null;\n  }\n\n  private createJobFragment(machineState: Machine, end: number, scheduledJob?: ScheduledJob): void {\n    if (scheduledJob) {\n      const start: number = machineState.currentFragmentStart!;\n      if (end - start > 0) {\n        const jobFragment: JobFragment = {\n          machine: machineState.index,\n          start,\n          end,\n          isWaiting: false,\n        };\n        scheduledJob.push(jobFragment);\n      }\n    }\n    this.adjustGaps(machineState, end, scheduledJob !== undefined);\n  }\n\n  /**\n   * Schedules processing of a job and returns its completion time (excluding delivery time).\n   */\n  private scheduleJob(availableMachineIndices: AvailableMachineIndices, size: number, isPreemptible: boolean,\n      earliestStart: number, scheduledJob?: ScheduledJob): number {\n    assert(availableMachineIndices.length > 0 && Number.isInteger(size) && size >= 0 &&\n        Number.isInteger(earliestStart), 'Invalid arguments');\n\n    const minFragmentSize = isPreemptible ? Math.min(size, this.minFragmentSize_) : size;\n    let currentSpeed = 0;\n    let lastTimestamp = earliestStart;\n    let remainingSize = size;\n    const machines: Machine[] = availableMachineIndices.map((index, availableIdx): Machine => {\n      const gapsList = this.gapsLists_[index];\n      assert(gapsList.tail !== null, 'Invariant: at least 2 elements in linked list gapsList');\n      return {\n        index,\n        availableIdx,\n        speed: this.machineSpeeds_[index],\n        currentFragmentStart: null,\n        previousGapsList: gapsList,\n        gapsList: gapsList.tail!,\n      };\n    });\n\n    while (remainingSize > 0) {\n      let eventTime: number = Number.MAX_SAFE_INTEGER;\n      let machine: Machine = machines[0];\n      availableMachineIndices.forEach((index, availableIdx) => {\n        const minWallClockTime = Math.ceil(minFragmentSize / machines[availableIdx].speed);\n        const machineEventTime = ListScheduling.nextTimeStamp(minWallClockTime, earliestStart, machines[availableIdx]);\n        if (machineEventTime < eventTime) {\n          eventTime = machineEventTime;\n          machine = machines[availableIdx];\n        }\n      });\n      let isProjectedEndTime: boolean = false;\n      const currentProjectedEndTime: number = Math.ceil(lastTimestamp + remainingSize / currentSpeed);\n      if (currentProjectedEndTime < eventTime) {\n        eventTime = currentProjectedEndTime;\n        isProjectedEndTime = true;\n      }\n      assert(Number.isInteger(eventTime) && Number.isInteger(lastTimestamp) && Number.isInteger(currentSpeed),\n          'Invariant: timestamps and speeds are integers');\n      remainingSize -= (eventTime - lastTimestamp) * currentSpeed;\n      assert(!isProjectedEndTime || remainingSize <= 0,\n          'Invariant: isProjectedEndTime implies remainingSize <= 0');\n\n      if (!isProjectedEndTime) {\n        if (machine.currentFragmentStart === null) {\n          const nextGap: Gap = machine.gapsList.head;\n          machine.currentFragmentStart = Math.max(earliestStart, nextGap.startTime);\n          remainingSize -= (eventTime - machine.currentFragmentStart) * machine.speed;\n          currentSpeed += machine.speed;\n        } else {\n          this.createJobFragment(machine, eventTime, scheduledJob);\n          currentSpeed -= machine.speed;\n          assert(machine.currentFragmentStart === null && currentSpeed >= 0);\n        }\n      }\n\n      lastTimestamp = eventTime;\n      assert(Number.isInteger(lastTimestamp) && Number.isInteger(remainingSize),\n          'Invariant: timestamps and durations are integers');\n    }\n\n    availableMachineIndices.forEach((ignoredIndex, availableIdx) => {\n      if (machines[availableIdx].currentFragmentStart !== null) {\n        this.createJobFragment(machines[availableIdx], lastTimestamp, scheduledJob);\n      }\n    });\n\n    return lastTimestamp;\n  }\n\n  /**\n   * Adds the given delivery time on the given machine to the given job schedule, and returns the overall completion\n   * time of the job.\n   */\n  private static scheduleDeliveryTime(machineIdx: number, processingCompletionTime: number, deliveryTime: number,\n      scheduledJob: ScheduledJob): number {\n    assert(Number.isInteger(deliveryTime), 'Invalid arguments');\n    assert(scheduledJob.length > 0 ? processingCompletionTime === scheduledJob[scheduledJob.length - 1].end : true,\n        'Processing completion time is end timestamp of last job fragment');\n    let completionTime: number = processingCompletionTime;\n    if (deliveryTime > 0) {\n      completionTime += deliveryTime;\n      const deliveryJobFragment: JobFragment = {\n        machine: machineIdx,\n        start: processingCompletionTime,\n        end: completionTime,\n        isWaiting: true,\n      };\n      scheduledJob.push(deliveryJobFragment);\n    }\n    return completionTime;\n  }\n\n  private allMachines(): AvailableMachineIndices {\n    return {\n      length: this.machineSpeeds_.length,\n      forEach(callbackfn: (index: number, availableIdx: number) => void): void {\n        for (let i = 0; i < this.length; ++i) {\n          callbackfn(i, i);\n        }\n      },\n      map<T>(callbackfn: (index: number, availableIdx: number) => T): T[] {\n        const array: T[] = [];\n        array.length = this.length;\n        for (let i = 0; i < this.length; ++i) {\n          array[i] = callbackfn(i, i);\n        }\n        return array;\n      },\n    };\n  }\n\n  private static singleMachine(singleMachineIdx: number): AvailableMachineIndices {\n    return {\n      length: 1,\n      forEach(callbackfn: (index: number, availableIdx: number) => void): void {\n        callbackfn(singleMachineIdx, 0);\n      },\n      map<T>(callbackfn: (index: number, availableIdx: number) => T): T[] {\n        return [callbackfn(singleMachineIdx, 0)];\n      },\n    };\n  }\n\n  private computeSchedule(): Schedule | SchedulingFailure {\n    const noDependencyNodes: JobGraphNode[] = [];\n    const jobGraphNodes: JobGraphNode[] = this.jobs_.map((job, index): JobGraphNode => ({\n      idx: index,\n      numDependencies: job.dependencies.length,\n      dependents: [],\n    }));\n    for (let i = 0; i < this.jobs_.length; ++i) {\n      const job = this.jobs_[i];\n      const jobGraphNode = jobGraphNodes[i];\n      for (const dependencyIdx of job.dependencies) {\n        jobGraphNodes[dependencyIdx].dependents.push(jobGraphNode);\n      }\n      if (job.dependencies.length === 0) {\n        noDependencyNodes.push(jobGraphNode);\n      }\n    }\n\n    const allMachines: AvailableMachineIndices = this.allMachines();\n    const newSchedule: Schedule = this.jobs_.map((ignoredJob) => []);\n    const finishTimes: number[] = this.jobs_.map((ignoredJob) => -1);\n    let numScheduledJobs = 0;\n    const noDependencyNodesHeap = new MinHeap<JobGraphNode>(noDependencyNodes, (left, right) => left.idx - right.idx);\n    while (!noDependencyNodesHeap.isEmpty()) {\n      const jobGraphNode: JobGraphNode = noDependencyNodesHeap.extractMin()!;\n      const job = this.jobs_[jobGraphNode.idx];\n      const isPreemptible: boolean = job.splitting !== JobSplitting.NONE;\n      const earliestStartTime = job.dependencies.reduce((previousEarliestStartTime, dependencyIdx) => {\n        const dependencyFinishTime: number = finishTimes[dependencyIdx];\n        assert(dependencyFinishTime >= 0, 'Dependencies are scheduled before their dependents');\n        return Math.max(previousEarliestStartTime, dependencyFinishTime);\n      }, job.releaseTime);\n      let availableMachines: AvailableMachineIndices = allMachines;\n      let deliveryMachineIdx: number | undefined;\n      if (job.splitting === JobSplitting.MULTIPLE_MACHINES) {\n        deliveryMachineIdx = job.preAssignment >= 0\n            ? job.preAssignment\n            : 0;\n      } else if (job.preAssignment >= 0) {\n        availableMachines = ListScheduling.singleMachine(job.preAssignment);\n        deliveryMachineIdx = job.preAssignment;\n      } else {\n        let maxCompletionTime: number = Number.MAX_SAFE_INTEGER;\n        for (let i = 0; i < this.numMachines_; ++i) {\n          const currentAvailableMachines = ListScheduling.singleMachine(i);\n          const currentCompletionTime =\n              this.scheduleJob(currentAvailableMachines, job.size, isPreemptible, earliestStartTime);\n          if (currentCompletionTime < maxCompletionTime) {\n            availableMachines = currentAvailableMachines;\n            deliveryMachineIdx = i;\n            maxCompletionTime = currentCompletionTime;\n          }\n        }\n      }\n      assert(deliveryMachineIdx !== undefined);\n      const completionTime: number = this.scheduleJob(\n          availableMachines, job.size, isPreemptible, earliestStartTime, newSchedule[jobGraphNode.idx]);\n      finishTimes[jobGraphNode.idx] = ListScheduling.scheduleDeliveryTime(\n          deliveryMachineIdx!, completionTime, job.deliveryTime, newSchedule[jobGraphNode.idx]);\n      ++numScheduledJobs;\n      for (const dependent of jobGraphNode.dependents) {\n        --dependent.numDependencies;\n        if (dependent.numDependencies === 0) {\n          noDependencyNodesHeap.add(dependent);\n        }\n      }\n    }\n\n    return numScheduledJobs !== this.jobs_.length\n        ? 'Detected a cycle in the dependency graph.'\n        : newSchedule;\n  }\n}\n","import { strict as assert } from 'assert';\nimport { isSchedulingFailure, Schedule, SchedulingFailure } from './api-types';\nimport { ComputeScheduleParameters, ComputeScheduleReturnType, workerFactory } from './worker-interface';\n\n/**\n * Runs (in a separate thread) the list scheduling algorithm on the given problem instance and returns the result\n * asynchronously.\n *\n * See [the project page](https://github.com/fschopp/project-planning-js) for more information on the algorithm.\n *\n * @param args argument list that will be passed on to {@link computeSchedule}() unaltered\n * @return promise that will be resolved with the solution or rejected with a {@link SchedulingFailure} containing a\n *     human-readable failure description if the problem instance is invalid (for example, has a cyclic dependency\n *     graph)\n */\nexport function computeScheduleAsync(...args: ComputeScheduleParameters): Promise<Schedule> {\n  assert(workerFactory.createWorker !== undefined, 'workerFactory.createWorker cannot be undefined');\n  const worker: Worker | SchedulingFailure = workerFactory.createWorker!();\n  if (isSchedulingFailure(worker)) {\n    const failure: SchedulingFailure = worker;\n    return Promise.reject(failure);\n  }\n\n  let isSettled: boolean = false;\n  // From MDN: \"the executor is called before the Promise constructor even returns the created object\"\n  // Hence all worker callbacks are in place before we send it the \"go\" message below.\n  const promise = new Promise<Schedule>((resolve, reject) => {\n    worker.onmessage = (event: MessageEvent) => {\n      const result: ComputeScheduleReturnType = event.data;\n      if (isSchedulingFailure(result)) {\n        assert(!isSettled, 'Attempted to settle promise more than once.');\n        reject(result);\n        isSettled = true;\n      } else {\n        assert(!isSettled, 'Attempted to settle promise more than once.');\n        resolve(result);\n        isSettled = true;\n      }\n    };\n    worker.onerror = (event: ErrorEvent) => {\n      worker.terminate();\n      const failure: SchedulingFailure = 'A runtime error occurred in source file ' +\n          `${event.filename} (line ${event.lineno}:${event.colno}):\\n${event.message}`;\n      // In theory, the worker could still cause an error after it has sent its last message. However, the ES6\n      // specification says:\n      // \"Attempting to resolve or reject a resolved promise has no effect.\"\n      // https://www.ecma-international.org/ecma-262/6.0/#sec-promise-objects\n      // Hence, there is no race condition. On the other hand, we don't want to swallow the problem. Therefore, we\n      // add an assertion:\n      assert(!isSettled, 'Attempted to settle promise more than once.');\n      reject(failure);\n      isSettled = true;\n    };\n  });\n  worker.postMessage(args);\n  return promise;\n}\n","/**\n * This module is not part of the public API!\n */\n\n/* API Barrier */\n\nimport { strict as assert } from 'assert';\n\n/**\n * Type that consists of the union of all properties that are marked as optional through a question mark.\n *\n * Note that properties that have undefined in their domain, but no question mark next to the property name are *not*\n * included. Also note that, in strict compilation mode, TypeScript will add undefined to the domain of the property if\n * there is a question mark next to the property name.\n *\n * @typeparam T generic type parameter\n */\nexport type OptionalPropertyNames<T extends {}> = {[K in keyof T]-?: {} extends {[_ in K]: T[K]} ? K : never}[keyof T];\nexport type Defined<T> = T extends undefined ? never : T;\nexport type OnlyOptionals<T extends {}> = {[K in OptionalPropertyNames<T>]: Defined<T[K]>};\n\n/**\n * Copy the values of all string-keyed enumerable own properties from the source object to the target object.\n *\n * Note the differences to\n * [`Object.assign()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign):\n * - Only properties with `string` keys are copied.\n * - A property of the source value that has the value `undefined` is copied only if the property key is not yet in the\n *   target. (The check is performed using the `in` operator.)\n *\n * @param target the target object\n * @param source the source object\n * @return the target object\n */\nexport function assignDefined<T extends {[key: string]: any}, U extends {[key: string]: any}>(\n    target: T, source: U | undefined): T & U {\n  const typedTarget: T & U = target as T & U;\n  if (source !== undefined) {\n    // Object.entries() returns “a given object's own enumerable string-keyed property [key, value] pairs,”\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries\n    for (const [key, value] of Object.entries(source)) {\n      if (!(key in target) || value !== undefined) {\n        // Casting of key necessary for type soundness:\n        // https://github.com/microsoft/TypeScript/issues/31661#issuecomment-497474815\n        typedTarget[key as keyof U] = source[key];\n      }\n    }\n  }\n  return typedTarget;\n}\n\n/**\n * Returns a deep clone of the given object.\n *\n * This function covers only what is needed in this project! It is not an equivalent to a library function.\n */\nexport function deepClone<T>(original: T): T {\n  assert(['undefined', 'object', 'boolean', 'number', 'string'].includes(typeof original),\n      'Value with unsupported type in deepClone()');\n  if (Array.isArray(original)) {\n    return original.map(deepClone) as T & any[];\n  } else if (typeof original === 'object' && original !== null) {\n    return Object.entries(original).reduce((obj, [key, value]) => {\n      // Casting of key necessary for type soundness:\n      // https://github.com/microsoft/TypeScript/issues/31661#issuecomment-497474815\n      obj[key as keyof T] = deepClone(value);\n      return obj;\n    }, {} as T & {[key: string]: any});\n  } else {\n    return original;\n  }\n}\n\n/**\n * Returns the first argument that is defined, or undefined if none of the arguments is defined.\n */\nexport function coalesce<T>(left: T | undefined, right: T): T {\n  return left === undefined ? right : left;\n}\n\n/**\n * Function that always throws an error.\n *\n * The purpose of this function is to be used as a compile-time type completeness check; for instance, in a `switch`\n * statement. Calling this function will cause no error *only if* control-flow-based type analysis infers the argument\n * type as `never` – in other words, if the function call cannot be reached.\n */\nexport function unreachableCase(x: never): never {\n  throw new Error(`Unexpected case that should be unreachable: ${x}`);\n}\n","import * as ProjectPlanningJs from '@fschopp/project-planning-js';\nimport { strict as assert } from 'assert';\nimport {\n  Contributor,\n  Failure,\n  IssueActivity,\n  IssueNode,\n  MultiAssigneeIssueActivity,\n  ProjectPlan,\n  SchedulableIssue,\n  Schedule,\n  SchedulingOptions,\n  YouTrackIssue,\n} from './api-types';\nimport { makeForest, traverseIssueForest } from './issue-forest';\nimport { assignDefined, coalesce, deepClone, OnlyOptionals, unreachableCase } from './util';\n\n/**\n * Computes and returns a schedule for the given issues.\n *\n * The problem of scheduling issues is transformed (“[reduced](https://en.wikipedia.org/wiki/Reduction_(complexity))”)\n * to the machine-scheduling problem, which is then solved using the *list-scheduling* algorithm from project\n * [fschopp/project-planning-js](https://github.com/fschopp/project-planning-js).\n *\n * Issues are scheduled in input order, subject to issue dependencies. Note that if an issue A depends on another\n * issue B, then both A *and* its sub-issues (transitively) depend on both B and all of B’s sub-issues. Beyond that,\n * parent-child relationships do *not* influence the scheduling order. That is, if both an issue and a sub-issues have\n * non-zero remaining effort, then both issues’ *own* (excluding sub-issues) processing will occur in input order.\n *\n * Under the hood, this function introduces “dummy” jobs with size zero and zero delivery time. These dummy jobs\n * (thanks to the transitive nature of dependencies) allow to “factor out” start-to-start and finish-to-finish\n * dependencies (from issues to sub-issues and vice versa, respectively). Thus, the transformed machine-scheduling\n * problem instance can be represented succinctly.\n *\n * @param issues Array of issues that need to be scheduled. The array is expected to be “closed” in the sense that a\n *     parent or dependency referenced by any of the issues is guaranteed to be contained in `issues`, too. That is,\n *     despite the name of this function, it is *not* expected that all issue are unresolved.\n * @param options scheduling options\n * @return promise that will be resolved with the schedule or rejected with a {@link Failure} containing a\n *     human-readable failure description if the problem instance is invalid (for example, has a cyclic dependency\n *     graph)\n */\nexport async function scheduleUnresolved(issues: SchedulableIssue[], options: SchedulingOptions):\n    Promise<Schedule> {\n  const actualOptions: Required<SchedulingOptions> = assignDefined(newDefaultSchedulingOptions(), options);\n  const {jobIdxToExtendedIssue, machineIdxToContributorIdx, schedulingInstance} =\n      makeSchedulingInstance(issues, actualOptions);\n  const machineSchedule: ProjectPlanningJs.Schedule = await ProjectPlanningJs.computeScheduleAsync(schedulingInstance);\n  const realTimeFactor = MINUTES_PER_WEEK_REAL_TIME / actualOptions.minutesPerWeek;\n  const schedule: IssueActivity[][] = issues.map(() => []);\n  const scheduleTimestampToEpochTime = (timestamp: number): number => Math.ceil(\n      actualOptions.predictionStartTimeMs + timestamp * actualOptions.resolutionMs * realTimeFactor);\n  for (let j = 0; j < machineSchedule.length; ++j) {\n    const scheduledJob: ProjectPlanningJs.ScheduledJob = machineSchedule[j];\n    const scheduledIssue: IssueActivity[] = schedule[jobIdxToExtendedIssue[j].issueIdx];\n    for (const jobFragment of scheduledJob) {\n      const issueActivity: IssueActivity = {\n        assignee: actualOptions.contributors[machineIdxToContributorIdx[jobFragment.machine]].id,\n        start: scheduleTimestampToEpochTime(jobFragment.start),\n        end: scheduleTimestampToEpochTime(jobFragment.end),\n        isWaiting: jobFragment.isWaiting,\n      };\n      scheduledIssue.push(issueActivity);\n    }\n  }\n  return schedule;\n}\n\n/**\n * Appends a schedule for issues with remaining effort or wait time to a project plan.\n *\n * This function does not modify any of its arguments. It returns an entirely new instance that shares no mutable data\n * with `projectPlan`.\n *\n * This function merges any issue activity in `projectPlan` that extends into an activity in `schedule` for the same\n * issue and by the same contributor.\n *\n * @param projectPlan the project plan, typically containing only past issue activities\n * @param schedule the (future) schedule for issues with remaining effort or wait time\n * @param divisionTimestamp Timestamp taken as end for the project plan and as beginning for the future schedule. Any\n *     project-plan activities starting at or after this timestamp, and any schedule activities ending at or before this\n *     timestamp are omitted.\n * @return a new project plan that contains the issue activities of both `projectPlan` and `schedule`\n */\nexport function appendSchedule(projectPlan: ProjectPlan, schedule: Schedule, divisionTimestamp: number):\n    ProjectPlan | Failure {\n  if (projectPlan.issues.length !== schedule.length) {\n    return 'The given project plan and the new schedule have a different number of issues.';\n  }\n\n  const collator = new Intl.Collator('en');\n  const newProjectPlan: ProjectPlan = deepClone(projectPlan);\n  for (let issueIdx = 0; issueIdx < newProjectPlan.issues.length; ++issueIdx) {\n    const issue: YouTrackIssue = newProjectPlan.issues[issueIdx];\n    // The following statement means \"group by assignee\"\n    const assigneeToActivities = new Map<string, IssueActivity[]>();\n    const existingActivities: IssueActivity[] = [];\n    for (const issueActivity of issue.issueActivities) {\n      if (issueActivity.start < divisionTimestamp) {\n        issueActivity.end = Math.min(issueActivity.end, divisionTimestamp);\n        if (assigneeToActivities.has(issueActivity.assignee)) {\n          assigneeToActivities.get(issueActivity.assignee)!.push(issueActivity);\n        } else {\n          assigneeToActivities.set(issueActivity.assignee, [issueActivity]);\n        }\n        existingActivities.push(issueActivity);\n      }\n    }\n    issue.issueActivities = existingActivities;\n\n    const createIfAbsent = (assignee: string): IssueActivity[] => {\n      if (assigneeToActivities.has(assignee)) {\n        return assigneeToActivities.get(assignee)!;\n      } else {\n        const returnValue: IssueActivity[] = [];\n        assigneeToActivities.set(assignee, returnValue);\n        return returnValue;\n      }\n    };\n\n    for (const scheduledActivity of schedule[issueIdx]) {\n      if (scheduledActivity.end <= divisionTimestamp) {\n        continue;\n      }\n      const newActivity: IssueActivity = {\n        ...scheduledActivity,\n        start: Math.max(scheduledActivity.start, divisionTimestamp),\n      };\n      const assigneeActivities: IssueActivity[] = createIfAbsent(scheduledActivity.assignee);\n      if (assigneeActivities.length > 0 &&\n          assigneeActivities[assigneeActivities.length - 1].end === newActivity.start &&\n          assigneeActivities[assigneeActivities.length - 1].isWaiting === newActivity.isWaiting) {\n        assigneeActivities[assigneeActivities.length - 1].end = newActivity.end;\n      } else {\n        assigneeActivities.push(newActivity);\n        issue.issueActivities.push(newActivity);\n      }\n    }\n\n    issue.issueActivities.sort((left, right) => {\n      const diff = left.end - right.end;\n      return diff !== 0\n          ? diff\n          : collator.compare(left.assignee, right.assignee);\n    });\n  }\n  return newProjectPlan;\n}\n\n/**\n * Returns the given issue activities grouped by interval and wait status.\n *\n * Every point in time is represented by at most two {@link MultiAssigneeIssueActivity} elements in the returned array;\n * one for all assignees that are not waiting, and one for all that are. Each {@link MultiAssigneeIssueActivity} element\n * has maximum length. In other words, no two {@link MultiAssigneeIssueActivity} elements could be merged into one.\n *\n * This function can be thought to work as follows: It first separates the activities according to wait status. Then,\n * for both groups: It projects all start and end timestamps of the given activities onto a single timeline. It then\n * iterates over these timestamps, and whenever the set of assignees changes:\n * 1. The current {@link MultiAssigneeIssueActivity} (if any) is ended.\n * 2. A new {@link MultiAssigneeIssueActivity} is added if the new set of assignees is non-empty.\n * As last step, the non-waiting and waiting activities are merged (and sorted).\n *\n * Note that all functions in this package that return arrays of {@link IssueActivity} guarantee a “normalized” form.\n * See, for instance, {@link YouTrackIssue.issueActivities}. With these extra guarantees, no activities in the array\n * return by this function ever overlap.\n *\n * This function treats activities with empty {@link IssueActivity.assignee} in the same way as all other activities.\n * That is, within this function, the empty string is a valid assignee name.\n *\n * @param activities The issue activities. The array does not have to be “normalized.”\n * @return The array of issue activities grouped by interval and wait status. The array will be sorted by the `start`\n *     and then by the `isWaiting` properties. The {@link MultiAssigneeIssueActivity.assignees} property of each element\n *     is guaranteed to be sorted, too.\n */\nexport function groupByIntervalAndWaitStatus(activities: IssueActivity[]): MultiAssigneeIssueActivity[] {\n  enum IssueEventType {\n    ADDED = 0,\n    REMOVED = 1,\n  }\n  interface IssueEvent {\n    type: IssueEventType;\n    assignee: string;\n    timestamp: number;\n    isWaiting: boolean;\n  }\n  const result: MultiAssigneeIssueActivity[] = [];\n  for (const isWaiting of [false, true]) {\n    const events: IssueEvent[] = [];\n    for (const activity of filter(activities, (filterActivity) => filterActivity.isWaiting === isWaiting)) {\n      const assignee = activity.assignee;\n      events.push(\n          {type: IssueEventType.ADDED, assignee, timestamp: activity.start, isWaiting},\n          {type: IssueEventType.REMOVED, assignee, timestamp: activity.end, isWaiting}\n      );\n    }\n    events.sort((first, second) => first.timestamp - second.timestamp);\n\n    let lastActivity: MultiAssigneeIssueActivity = {\n      assignees: [],\n      start: Number.MIN_SAFE_INTEGER,\n      end: Number.MAX_SAFE_INTEGER,\n      isWaiting: false,\n    };\n    let lastTimestamp: number = Number.MIN_SAFE_INTEGER;\n    const assigneeToActivityCount = new Map<string, number>();\n    for (const event of events) {\n      if (event.timestamp > lastTimestamp) {\n        lastActivity = timePassed(lastActivity, lastTimestamp, assigneeToActivityCount, result, isWaiting);\n      }\n\n      let assigneeActiveCount: number = coalesce(assigneeToActivityCount.get(event.assignee), 0);\n      if (event.type === IssueEventType.REMOVED) {\n        --assigneeActiveCount;\n      } else {\n        ++assigneeActiveCount;\n      }\n      assert(assigneeActiveCount >= 0, 'count cannot become negative');\n      assigneeToActivityCount.set(event.assignee, assigneeActiveCount);\n      lastTimestamp = event.timestamp;\n    }\n    timePassed(lastActivity, lastTimestamp, assigneeToActivityCount, result, isWaiting);\n  }\n  result.sort((first, second) => first.start === second.start\n      ? (+first.isWaiting) - (+second.isWaiting)\n      : first.start - second.start);\n  return result;\n}\n\n\n/**\n * Mapping between an issue and (either one or two) jobs in the machine scheduling problem.\n */\ninterface ExtendedIssue extends Required<SchedulableIssue> {\n  /**\n   * Index of this issue in the original (flat) array that was used to create this extended issue.\n   */\n  issueIdx: number;\n\n  /**\n   * Index of the “main” (machine-scheduling) job corresponding to the current issue.\n   *\n   * This job has a size computed from {@link SchedulableIssue.remainingEffortMs}, etc.\n   */\n  jobIdx: number;\n\n  /**\n   * Index of the “dummy” (machine-scheduling) job that the main job and all jobs corresponding to direct sub-issues of\n   * the current issue depend on.\n   *\n   * This dummy job (with size zero and zero delivery time) ensures a start-to-start dependency from the current issue\n   * to its sub-issues. It is this job that depends on the jobs corresponding to dependencies of the current issue.\n   *\n   * If the current issue has no sub-issues, this will be the same as {@link jobIdx}.\n   */\n  startToStartDummyJobIdx: number;\n\n  /**\n   * Index of the “dummy” (machine-scheduling) job that depends on the main job and all jobs corresponding to direct\n   * sub-issues of the current issue.\n   *\n   * This dummy job (with size zero and zero delivery time) ensures a finish-to-finish dependency from the current\n   * issue’s sub-issues to itself. It is this job that the jobs corresponding to dependents of the current issue depend\n   * on.\n   *\n   * If the current issue has no sub-issues, this will be the same as {@link jobIdx}.\n   */\n  asDependencyJobIdx: number;\n}\n\n/**\n * The kind of a machine-scheduling job created for an issue.\n */\nenum JobType {\n  MAIN,\n  START_TO_START,\n  FINISH_TO_FINISH,\n}\n\n/**\n * A job descriptor that will be converted into a `Job`.\n */\ntype JobDescriptor = [IssueNode<ExtendedIssue>, JobType];\n\n\n/**\n * The number of minutes per week, in real time.\n */\nconst MINUTES_PER_WEEK_REAL_TIME: number = 7 * 24 * 60;\n\nconst NO_INDEX: number = -1;\n\n/**\n * Returns a new object with values for the optional properties of {@link SchedulableIssue}.\n */\nfunction newDefaultSchedulableIssue(): OnlyOptionals<SchedulableIssue> {\n  return {\n    remainingWaitTimeMs: 0,\n    parent: '',\n    splittable: false,\n    dependencies: [],\n    assignee: '',\n  };\n}\n\n/**\n * Returns a new object with values for the optional properties of {@link SchedulingOptions}.\n */\nfunction newDefaultSchedulingOptions(): OnlyOptionals<SchedulingOptions> {\n  return {\n    minutesPerWeek: 5 * 8 * 60,\n    resolutionMs: 60 * 60 * 1000,\n    minActivityDuration: 1,\n    predictionStartTimeMs: Date.now(),\n  };\n}\n\n/**\n * Returns a machine-scheduling problem instance for the given issues, thereby “reducing” the problem to a another one\n * for that a solver already exists.\n *\n * For every parent issue P, this function creates two dummy jobs with size zero and zero delivery time:\n * 1. A job that depends on all direct sub-issues.\n * 2. A job that all direct sub-issues depend on.\n */\nfunction makeSchedulingInstance(issues: SchedulableIssue[], actualOptions: Required<SchedulingOptions>):\n    {\n      jobIdxToExtendedIssue: ExtendedIssue[];\n      machineIdxToContributorIdx: number[];\n      schedulingInstance: ProjectPlanningJs.SchedulingInstance;\n    } {\n  const jobIdxToExtendedIssue: ExtendedIssue[] = [];\n  const machineIdxToContributorIdx: number[] = [];\n\n  // Invariant: n === machineIdxToContributorIdx.length === schedulingInstance.machineSpeeds.length\n  let n: number = 0;\n  const assigneeToContributorIdx = new Map<string, number>();\n  const schedulingInstance: ProjectPlanningJs.SchedulingInstance = {\n    machineSpeeds: [],\n    jobs: [],\n    minFragmentSize: actualOptions.minActivityDuration * actualOptions.minutesPerWeek,\n  };\n  for (let i = 0; i < actualOptions.contributors.length; ++i) {\n    const contributor: Contributor = actualOptions.contributors[i];\n    assigneeToContributorIdx.set(contributor.id, i);\n    const numMembers: number = coalesce(contributor.numMembers, 1);\n    machineIdxToContributorIdx.length = n + numMembers;\n    machineIdxToContributorIdx.fill(i, n, n + numMembers);\n    schedulingInstance.machineSpeeds.length = n + numMembers;\n    schedulingInstance.machineSpeeds.fill(contributor.minutesPerWeek, n, n + numMembers);\n    n += numMembers;\n  }\n\n  // From the intermediate representation as job descriptors, create the actual machine-scheduling jobs. This cannot be\n  // done directly (without the job descriptors), because dependency information is required.\n  for (const [node, jobType] of makeJobDescriptors(issues)) {\n    let job: ProjectPlanningJs.Job;\n    const issue: ExtendedIssue = node.issue;\n    const size: number = 0;\n    const dependencies: number[] = node.parent !== undefined\n        ? [node.parent.issue.startToStartDummyJobIdx]\n        : [];\n    switch (jobType) {\n      case JobType.START_TO_START:\n        dependencies.push(...node.dependencies.map((dependencyNode) => dependencyNode.issue.asDependencyJobIdx));\n        job = {size, dependencies};\n        break;\n      case JobType.FINISH_TO_FINISH:\n        job = {\n          size,\n          dependencies: node.children\n              .map((childNode) => childNode.issue.asDependencyJobIdx)\n              .concat(node.issue.jobIdx),\n        };\n        break;\n      case JobType.MAIN:\n        if (node.children.length === 0) {\n          // There is no start-to-start job for this issue.\n          dependencies.push(...node.dependencies.map((dependencyNode) => dependencyNode.issue.asDependencyJobIdx));\n        }\n        job = {\n          size: Math.ceil(issue.remainingEffortMs / actualOptions.resolutionMs) * actualOptions.minutesPerWeek,\n          deliveryTime: Math.ceil(issue.remainingWaitTimeMs / actualOptions.resolutionMs),\n          splitting: issue.splittable\n              ? ProjectPlanningJs.JobSplitting.MULTIPLE_MACHINES\n              : ProjectPlanningJs.JobSplitting.PREEMPTION,\n          dependencies,\n          preAssignment: issue.assignee.length > 0\n              ? assigneeToContributorIdx.get(issue.assignee)\n              : undefined,\n        };\n        break;\n      /* istanbul ignore next */\n      default: return unreachableCase(jobType);\n    }\n    jobIdxToExtendedIssue.push(node.issue);\n    schedulingInstance.jobs.push(job);\n  }\n  return {jobIdxToExtendedIssue, machineIdxToContributorIdx, schedulingInstance};\n}\n\nfunction makeJobDescriptors(issues: SchedulableIssue[]): JobDescriptor[] {\n  // 1. Augment the given issues with extra information (some of which we'll have to fill in later).\n  const extendedIssues: ExtendedIssue[] = issues.map((issue, issueIdx) => ({\n    ...assignDefined(newDefaultSchedulableIssue(), issue),\n    issueIdx,\n    // The job indices will be updated later!\n    jobIdx: NO_INDEX,\n    startToStartDummyJobIdx: NO_INDEX,\n    asDependencyJobIdx: NO_INDEX,\n  }));\n  const nodes: IssueNode<ExtendedIssue>[] = [];\n  nodes.length = extendedIssues.length;\n  const jobDescriptors: JobDescriptor[] = [];\n\n  // 2. Build tree. Also, for each issue, create 1 (if the issue has no sub-issues) or 3 (otherwise) machine-scheduling\n  // jobs. Note that the dummy jobs come first, because they need higher priority than all the main jobs. The reason is\n  // that no otherwise ready main job should ever wait for a dummy job.\n  traverseIssueForest(makeForest(extendedIssues), (node) => {\n    nodes[node.index] = node;\n    if (node.children.length > 0) {\n      jobDescriptors.push([node, JobType.START_TO_START], [node, JobType.FINISH_TO_FINISH]);\n    }\n  });\n  // reduce() does *not* call callbackfn for empty slots, so the assert is reasonable:\n  // https://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.21\n  assert(nodes.reduce((count) => count + 1, 0) === extendedIssues.length, 'Traversal must have visited all issues');\n  for (const node of nodes) {\n    const issue: ExtendedIssue = node.issue;\n    // Initialize the jobs indices. The dummy job indices may be updated again below.\n    issue.startToStartDummyJobIdx = issue.asDependencyJobIdx = issue.jobIdx = jobDescriptors.length;\n    jobDescriptors.push([node, JobType.MAIN]);\n  }\n\n  // 3. Now that we know what machine-scheduling jobs will be created (and what issue each corresponds to), complete the\n  // reverse mapping from issue to job indices.\n  outer: for (let i = 0; i < jobDescriptors.length; ++i) {\n    const [node, jobType] = jobDescriptors[i];\n    const issue: ExtendedIssue = node.issue;\n    switch (jobType) {\n      case JobType.START_TO_START: issue.startToStartDummyJobIdx = i; break;\n      case JobType.FINISH_TO_FINISH: issue.asDependencyJobIdx = i; break;\n      case JobType.MAIN: break outer;\n      /* istanbul ignore next */\n      default: return unreachableCase(jobType);\n    }\n  }\n\n  return jobDescriptors;\n}\n\n/**\n * Commits the last issue activity if the set of assignees changed at the last timestamp.\n *\n * This function is called because time progressed from `lastTimestamp` to `x`, so the interval between `lastTimestamp`\n * and `x` becomes “settled.”\n *\n * Note that there are 3 logical timestamps of relevance here:\n * 1. The timestamp when `lastActivity` started. This is simply `lastActivity.start`.\n * 2. The timestamp of the last event prior to the current time. This is `lastTimestamp`.\n * 3. The current time. This function does not need an exact value, so it may be an arbitrary value\n *    `x > lastTimestamp`.\n *\n * @param lastActivity The activity that is known to have lasted (at least) until timestamp `lastTimestamp`. That is,\n *     `lastActivity.assignees` contains the set of assignees between timestamps `lastActivity.start` and\n *     `lastTimestamp`.\n * @param lastTimestamp The timestamp of the last event (prior to the current time `x`). It holds that\n *     `lastTimestamp < x`. If the set of assignees changed at `lastTimestamp`, then this function updates\n *     `lastActivity` and adds it to `result` (assuming there was at least one assignee between timestamps\n *     `lastActivity.start` and `lastTimestamp`).\n * @param currentAssignees The set of assignees between timestamp `lastTimestamp` and `x`.\n * @param result The array of activities that `lastActivity` will be added to if the set of assignees changed at\n *     timestamp `lastTimestamp`.\n * @param isWaiting If this function returns a new activity (starting at `lastTimestamp`), the value for the\n *     `isWaiting` property.\n * @return The current activity that is known to have lasted (at least) until timestamp `x`.\n */\nfunction timePassed(lastActivity: MultiAssigneeIssueActivity, lastTimestamp: number,\n    currentAssignees: Map<string, number>, result: MultiAssigneeIssueActivity[], isWaiting: boolean):\n    MultiAssigneeIssueActivity {\n  let assigneesChanged: boolean = false;\n  for (const assignee of lastActivity.assignees) {\n    if (coalesce(currentAssignees.get(assignee), 0) <= 0) {\n      assigneesChanged = true;\n      break;\n    }\n  }\n  const assignees: string[] = [];\n  for (const [assignee, activeCount] of currentAssignees.entries()) {\n    if (activeCount > 0) {\n      assignees.push(assignee);\n    }\n  }\n  assigneesChanged = assigneesChanged || lastActivity.assignees.length !== assignees.length;\n  if (assigneesChanged) {\n    if (lastActivity.assignees.length > 0) {\n      lastActivity.end = lastTimestamp;\n      result.push(lastActivity);\n    }\n    assignees.sort();\n    return {\n      assignees,\n      start: lastTimestamp,\n      end: Number.MAX_SAFE_INTEGER,\n      isWaiting,\n    };\n  } else {\n    return lastActivity;\n  }\n}\n\nfunction* filter<T>(iterable: Iterable<T>, predicate: (val: T) => boolean): Iterable<T> {\n  for (const value of iterable) {\n    if (predicate(value)) {\n      yield value;\n    }\n  }\n}\n","/**\n * Types defined by the [YouTrack REST API](https://www.jetbrains.com/help/youtrack/standalone/api-entities.html).\n *\n * Not part of the public API of this project.\n */\n\n/**\n * YouTrack REST API paths.\n */\nexport const youTrackPath = Object.freeze({\n  ACTIVITIES_PAGE: 'api/activitiesPage',\n  CUSTOM_FIELD: (customFieldId: string) => `api/admin/customFieldSettings/customFields/${customFieldId}`,\n  ISSUES: (queryId: string) => `api/savedQueries/${queryId}/issues`,\n  SAVED_QUERY: (queryId: string) => `api/savedQueries/${queryId}`,\n  SORTED_ISSUES: 'api/sortedIssues',\n  STATE_BUNDLES: 'api/admin/customFieldSettings/bundles/state',\n  WORK_TIME_SETTINGS: 'api/admin/timeTrackingSettings/workTimeSettings',\n});\n\n/**\n * Hub REST API paths.\n */\nexport const hubPath = Object.freeze({\n  OAUTH: 'api/rest/oauth2/auth',\n});\n\nexport interface ActivityCursorPage {\n  afterCursor?: string;\n  hasAfter: boolean;\n  activities: ActivityItem[];\n}\n\nexport interface ActivityItem {\n  $type: string;\n  timestamp: number;\n  added: any[];\n  removed: any[];\n  field: FilterField;\n}\n\nexport interface BaseBundle extends Bundle {\n  values: BundleElement[];\n}\n\nexport interface Bundle {\n  id: string;\n}\n\nexport interface BundleCustomFieldDefaults extends CustomFieldDefaults {\n  $type: string;\n}\n\nexport interface BundleElement {\n  id: string;\n  name: string;\n  ordinal: number;\n  color: FieldStyle;\n}\n\nexport interface CustomField {\n  id: string;\n  fieldDefaults: CustomFieldDefaults;\n  fieldType: FieldType;\n  name: string;\n}\n\nexport interface CustomFieldActivityItem extends ActivityItem {\n  $type: 'CustomFieldActivityItem';\n  target: Issue;\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface CustomFieldDefaults {}\n\nexport interface EnumBundleCustomFieldDefaults extends BundleCustomFieldDefaults {\n  bundle: EnumBundle;\n}\n\nexport interface EnumBundle extends BaseBundle {\n  values: EnumBundleElement[];\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface EnumBundleElement extends LocalizableBundleElement {}\n\nexport interface FieldStyle {\n  background: string;\n  foreground: string;\n}\n\nexport interface FieldType {\n  id: string;\n}\n\nexport interface FilterField {\n  id: string;\n  name: string;\n}\n\nexport interface Issue {\n  $type: 'Issue';\n  created: number;\n  customFields: IssueCustomField[];\n  id: string;\n  idReadable: string;\n  links: IssueLink[];\n  parent: IssueLink;\n  subtasks: IssueLink;\n  resolved: number | null;\n  summary: string;\n  updated: number;\n}\n\nexport interface IssueCustomField {\n  $type: string;\n  projectCustomField: ProjectCustomField;\n}\n\nexport interface IssueFolder {\n  id: string;\n  name: string;\n}\n\nexport interface IssueLink {\n  direction: 'INWARD' | 'OUTWARD' | 'BOTH';\n  linkType: IssueLinkType;\n  issues: Issue[];\n}\n\nexport interface IssueLinkType {\n  directed: boolean;\n  id: string;\n  name: string;\n  sourceToTarget: string;\n  targetToSource: string;\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface LocalizableBundleElement extends BundleElement {}\n\nexport interface PeriodIssueCustomField extends IssueCustomField {\n  $type: 'PeriodIssueCustomField';\n  value: PeriodValue | null;\n}\n\nexport function isPeriodIssueCustomField(field: any): field is PeriodIssueCustomField {\n  return field.$type === 'PeriodIssueCustomField';\n}\n\nexport interface PeriodValue {\n  minutes: number;\n}\n\nexport interface ProjectCustomField {\n  field: CustomField;\n}\n\nexport interface SavedQuery extends WatchFolder {\n  issues: Issue[];\n}\n\nexport interface SortedIssuesResponse {\n  count: number;\n}\n\nexport interface SingleUserIssueCustomField extends IssueCustomField {\n  $type: 'SingleUserIssueCustomField';\n  value: User | null;\n}\n\nexport function isSingleUserIssueCustomField(field: any): field is SingleUserIssueCustomField {\n  return field.$type === 'SingleUserIssueCustomField';\n}\n\nexport interface SingleEnumIssueCustomField extends IssueCustomField {\n  $type: 'SingleEnumIssueCustomField';\n  value: EnumBundleElement | null;\n}\n\nexport function isSingleEnumIssueCustomField(field: any): field is SingleEnumIssueCustomField {\n  return field.$type === 'SingleEnumIssueCustomField';\n}\n\nexport interface StateBundle extends BaseBundle {\n  $type: 'StateBundle';\n  values: StateBundleElement[];\n}\n\nexport interface StateBundleElement extends LocalizableBundleElement {\n  isResolved: boolean;\n}\n\nexport interface StateBundleCustomFieldDefaults extends BundleCustomFieldDefaults {\n  bundle: StateBundle;\n}\n\nexport interface StateIssueCustomField extends IssueCustomField {\n  $type: 'StateIssueCustomField';\n  value: StateBundleElement;\n}\n\nexport function isStateIssueCustomField(field: any): field is StateIssueCustomField {\n  return field.$type === 'StateIssueCustomField';\n}\n\nexport interface User {\n  id: string;\n  avatarUrl: string;\n  fullName: string;\n}\n\nexport interface WatchFolder extends IssueFolder {\n  owner: User;\n}\n\nexport interface WorkTimeSettings {\n  minutesADay: number;\n  daysAWeek: number;\n}\n\n/**\n * Error returned by the YouTrack REST API, typically in case of an invalid request.\n */\nexport interface YouTrackError {\n  error: string;\n  error_description: string;\n}\n","import * as RestApi from './you-track-rest';\n\nconst STORAGE_PREFIX = '@fschopp/you-track-planning-js';\n\nconst baseUrlToAccessTokenMap: {[baseUrl: string]: AccessToken} = {};\n\n/**\n * A YouTrack base URL and application state for temporary storage in the session storage during an OAuth2 request.\n */\ninterface BaseUrlAndAppState<T> {\n  baseUrl: string;\n  appState: T;\n}\n\n/**\n * An access token, together with its type and validity period.\n */\ninterface AccessToken {\n  type: string;\n  secret: string;\n\n  /**\n   * Timestamp in milliseconds since the epoch.\n   */\n  validUntil: number;\n}\n\n/**\n * Returns the key in the session storage where the app state is stored temporarily (while the user is on the YouTrack\n * login page).\n */\nfunction storageKeyForOauthId(oAuthId: string): string {\n  return `${STORAGE_PREFIX}/oauth${oAuthId}`;\n}\n\nfunction normalizeUrl(baseUrl: string): string {\n  return new URL(baseUrl).toString();\n}\n\n/**\n * Navigates the current window to the Jetbrains Hub OAuth2 page.\n *\n * Once successfully logged in, the OAuth2 page will redirect the browser to the given `redirectUrl`. To be able to\n * seamlessly proceed where the user left off, the current application state needs to be preserved. This method stores\n * the given application state `appState` in the\n * [session storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage). The rationale is:\n * 1. The application state could be larger than what one would reasonably encode in the redirect URL (which is another\n *    possibility of preserving the state).\n * 2. The application state does not leak to a third party.\n *\n * Nonetheless, users of this method should be aware of the limitations of using the session storage as well. MDN has\n * some [additional information](https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API) on this topic.\n *\n * @typeparam T type of the application state\n * @param youTrackBaseUrl The YouTrack base URL to which relative paths of form `api/...` will be appended. The base URL\n *     is expected to end in a slash (/). See {@link httpGet}().\n * @param hubUrl Hub URL to which a relative path like `api/rest/oauth2/auth` will be appended. The hub URL is expected\n *     to end in a slash (/). Note that the Hub URL is distinct from the YouTrack base URL.\n * @param serviceId Identification of the particular YouTrack installation. See the\n *     [YouTrack manual](https://www.jetbrains.com/help/youtrack/standalone/OAuth-Authorization.html).\n * @param appState State that will be stored in session storage and later returned by\n *     {@link handlePotentialOauthRedirect}(). The value passed as argument needs to be serializable with\n *     {@link JSON.stringify}().\n * @param redirectUrl The URL that YouTrack will redirect back to after authorization. In order to not expose more data\n *     than necessary to the YouTrack server, the url will be stripped from its hash, username/password, and search\n *     query (if any). If state needs to be preserved, the `appState` argument should be used.\n */\nexport function goToOauthPage<T>(youTrackBaseUrl: string, hubUrl: string, serviceId: string, appState: T,\n    redirectUrl: string = window.location.href): void {\n  const normalizedBaseUrl = normalizeUrl(youTrackBaseUrl);\n  const normalizedHubUrl = normalizeUrl(hubUrl);\n  const strippedRedirectUrl = new URL(redirectUrl);\n  // Create a bare redirect URL, so to not expose more data than necessary\n  strippedRedirectUrl.hash = '';\n  strippedRedirectUrl.username = '';\n  strippedRedirectUrl.password = '';\n  strippedRedirectUrl.search = '';\n\n  const oAuthId = `${Date.now().toString()}_${Math.floor(Math.random() * 10000)}`;\n  const youTrackOauthUrl = new URL(RestApi.hubPath.OAUTH, normalizedHubUrl);\n  Object.entries({\n    response_type: 'token',\n    state: oAuthId,\n    redirect_uri: strippedRedirectUrl.toString(),\n    request_credentials: 'default',\n    client_id: serviceId,\n    scope: 'YouTrack',\n  }).forEach(([key, value]) => youTrackOauthUrl.searchParams.append(key, value));\n\n  const baseUrlAndAppState: BaseUrlAndAppState<T> = {\n    baseUrl: normalizedBaseUrl,\n    appState,\n  };\n  sessionStorage.setItem(storageKeyForOauthId(oAuthId), JSON.stringify(baseUrlAndAppState));\n  window.location.href = youTrackOauthUrl.toString();\n}\n\n/**\n * Parses `window.location.href` to determine whether the URL stems from a YouTrack OAuth2 redirect, and returns the\n * restored application state if so.\n *\n * This method is meant to be called when the page is loaded. If the current URL contains a hash that is the result of\n * an OAuth2 redirect, any URL component except domain and path (such as search query or hash) will be removed. Note\n * that `window.location` will be updated with `window.history.replaceState()`.\n *\n * The application state will be restored from session storage. Unfortunately, some browsers are known to have bugs that\n * cause unexpected results if `sessionStorage` is accessed “too early,” relative to the page load in the browser. This\n * applies at least to [Safari 12.1.1](https://github.com/fschopp/project-planning-for-you-track/issues/1) and older\n * versions of [Firefox](https://stackoverflow.com/questions/13852209/localstorage-unreliable-in-firefox). (Recent\n * versions of Chrome and Firefox appear to work just fine.) It is advisable to delay calling this method (for instance,\n * with `setTimeout()`) when targeting browsers that are known to be problematic.\n *\n * Finally, this function keeps a record of the YouTrack authorization, making it available via\n * {@link authorizationFor}().\n *\n * @typeparam T type of the application state\n * @return object containing the application state or undefined if the current location is not the result of a YouTrack\n *     OAuth2 redirect\n */\nexport function handlePotentialOauthRedirect<T>(): T | undefined {\n  const url = new URL(window.location.href);\n  const fragmentParams = new URLSearchParams(url.hash.slice(1));\n  const oAuthId: string | null = fragmentParams.get('state');\n  if (oAuthId !== null) {\n    const key = storageKeyForOauthId(oAuthId);\n    const storedValue: string | null = sessionStorage.getItem(key);\n    if (storedValue !== null) {\n      const baseUrlAndAppState: BaseUrlAndAppState<T> = JSON.parse(storedValue);\n      sessionStorage.removeItem(key);\n\n      const secret: string | null = fragmentParams.get('access_token');\n      const expiresIn: string | null = fragmentParams.get('expires_in');\n      const type: string | null = fragmentParams.get('token_type');\n      if (secret !== null && expiresIn !== null && type !== null) {\n        const validUntil: number = Date.now() + parseInt(expiresIn, 10) * 1000;\n        baseUrlToAccessTokenMap[baseUrlAndAppState.baseUrl] = {\n          type,\n          secret,\n          validUntil,\n        };\n        url.hash = '';\n        // Not using window.location.replace(), because that triggers page reloads when passing more than just a\n        // (relative URL with a) hash.\n        window.history.replaceState(undefined, '', url.toString());\n        return baseUrlAndAppState.appState;\n      }\n    }\n  }\n  return undefined;\n}\n\n/**\n * Returns the access token for the given base URL, or undefined if there is no (unexpired) one.\n *\n * This method returns the HTTP Authorization header known due to a previous call to\n * {@link handlePotentialOauthRedirect}(), or undefined if not known for the given URL.\n *\n * @param baseUrl The YouTrack base URL to which relative paths of form `api/...` will be appended. The base URL is\n *     expected to end in a slash (/). See {@link httpGet}().\n * @return value for HTTP authorization header\n */\nexport function authorizationFor(baseUrl: string): string | undefined {\n  const normalizedBaseUrl = normalizeUrl(baseUrl);\n  if (!(normalizedBaseUrl in baseUrlToAccessTokenMap)) {\n    return undefined;\n  }\n\n  const accessToken: AccessToken = baseUrlToAccessTokenMap[normalizedBaseUrl];\n  if (Date.now() >= accessToken.validUntil) {\n    delete baseUrlToAccessTokenMap[normalizedBaseUrl];\n    return undefined;\n  }\n\n  return `${accessToken.type} ${accessToken.secret}`;\n}\n","import { Failure } from './api-types';\nimport { authorizationFor } from './you-track-oauth';\nimport { YouTrackError } from './you-track-rest';\n\nfunction isYouTrackError<T>(value: any): value is YouTrackError {\n  // noinspection SuspiciousTypeOfGuard\n  return value && typeof value.error === 'string' && typeof value.error_description === 'string';\n}\n\n/**\n * Returns a promise that will be fulfilled with the result of an HTTP GET request to a YouTrack REST resource.\n *\n * This method sets the HTTP Authorization header if it is known due to a previous call to\n * {@link handlePotentialOauthRedirect}(). If no authorization is available, this method rejects the promise\n * immediately.\n *\n * @typeparam T the type of the response by YouTrack (after parsing the JSON)\n * @param baseUrl The YouTrack base URL to which relative paths of form `api/...` will be appended. The base URL is\n *     expected to end in a slash (/). For an InCloud instance without a custom domain, this is of form\n *     `https://<name>.myjetbrains.com/youtrack/`.\n * @param resourcePath relative path to the REST API resource requested\n * @param queryParams parameters that will be added to the query string\n * @return A promise that in case of success will be fulfilled with the retrieved object. In case of any failure, it\n *     will be rejected with a {@link Failure}.\n */\nexport function httpGet<T>(baseUrl: string, resourcePath: string, queryParams: {[param: string]: string} = {}):\n    Promise<T> {\n  const authorization: string | undefined = authorizationFor(baseUrl);\n  if (authorization === undefined) {\n    const failure: Failure = `No valid unexpired OAuth token available for ${baseUrl}.`;\n    return Promise.reject(failure);\n  }\n\n  const url = new URL(resourcePath, baseUrl);\n  const urlSearchParams = url.searchParams;\n  Object.entries(queryParams).forEach(([key, value]) => urlSearchParams.append(key, value));\n  const xhr = new XMLHttpRequest();\n  xhr.open('GET', url.toString());\n  xhr.setRequestHeader('Authorization', authorization);\n  xhr.setRequestHeader('Accept', 'application/json');\n  xhr.responseType = 'json';\n  const promise = new Promise<T>((resolve, reject) => {\n    xhr.onloadend = () => onRequestFinished<T>(url, xhr, resolve, reject);\n  });\n  xhr.send();\n  return promise;\n}\n\n/**\n * Returns a promise that will be fulfilled with the result of an HTTP GET request to a YouTrack REST array resource.\n *\n * This method sets the HTTP Authorization header if it is known due to a previous call to\n * {@link handlePotentialOauthRedirect}(). If no authorization is available, this method rejects the promise\n * immediately.\n *\n * @typeparam T the element type of the array response by YouTrack (after parsing the JSON)\n * @param baseUrl The YouTrack base URL. See also {@link httpGet}().\n * @param resourcePath relative path to the REST API resource requested\n * @param queryParams parameters that will be added to the query string\n * @param restBatchSize Number of elements per HTTP request. Larger values are faster, but increase the risk of\n *     transmission problems (or outright rejection by future YouTrack versions that may have rate limitations).\n * @return A promise that in case of success will be fulfilled with the retrieved array. In case of any failure, it\n *     will be rejected with a {@link Failure}.\n */\nexport async function httpGetAll<T>(baseUrl: string, resourcePath: string,\n    queryParams: {[param: string]: string}, restBatchSize: number): Promise<T[]> {\n  return httpGetAllWithOptions<T, T[]>(baseUrl, resourcePath, queryParams, restBatchSize, (batch, array) => {\n    array.push(...batch);\n    return array;\n  }, []);\n}\n\n/**\n * Returns a promise that will be fulfilled with a transformation of the result of an HTTP GET request to a YouTrack\n * REST array resource.\n *\n * This method sets the HTTP Authorization header if it is known due to a previous call to\n * {@link handlePotentialOauthRedirect}(). If no authorization is available, this method rejects the promise\n * immediately.\n *\n * @typeparam T the element type of the array response by YouTrack (after parsing the JSON)\n * @typeparam U the return type of `processBatch()` and therefore also this function\n * @param baseUrl The YouTrack base URL. See also {@link httpGet}().\n * @param resourcePath relative path to the REST API resource requested\n * @param queryParams parameters that will be added to the query string\n * @param restBatchSize Number of elements per HTTP request. See also {@link httpGetAll}().\n * @param processBatch callback called for the result of each individual HTTP request\n * @param processBatch.batch the retrieved array\n * @param processBatch.previous the state returned by the previous invocation of `processBatch()`, or the value of\n *     `initial` if this is the first invocation\n * @param initial the value passed to the first invocation of `processBatch()` as argument `initial`\n * @return A promise that in case of success will be fulfilled with the last result of `processBatch()`. In case of any\n *     failure, it will be rejected with a {@link Failure}.\n */\nexport async function httpGetAllWithOptions<T, U>(baseUrl: string, resourcePath: string,\n    queryParams: {[param: string]: string}, restBatchSize: number,\n    processBatch: (batch: T[], previous: U) => U, initial: U): Promise<U> {\n  let numElementsRetrieved: number = 0;\n  let busy = true;\n  queryParams.$top = restBatchSize.toString();\n  let batchPromise: Promise<T[]> = httpGet<T[]>(baseUrl, resourcePath, queryParams);\n  let state: U = initial;\n  do {\n    const batch: T[] = await batchPromise;\n    numElementsRetrieved += batch.length;\n    if (batch.length >= restBatchSize) {\n      queryParams.$skip = numElementsRetrieved.toString();\n      batchPromise = httpGet<T[]>(baseUrl, resourcePath, queryParams);\n    } else {\n      busy = false;\n    }\n    state = processBatch(batch, state);\n  } while (busy);\n  return state;\n}\n\n/**\n * Handles completion of an {@link XMLHttpRequest}, whether successful or not.\n */\nfunction onRequestFinished<T>(url: URL, xhr: XMLHttpRequest, resolve: (result: T) => void,\n    reject: (failure: Failure) => void): void {\n  // From https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/response:\n  // \"The value is null if the request is not yet complete or was unsuccessful\"\n  const response: T | YouTrackError | null = xhr.response;\n  let failure: Failure;\n  if (response === null) {\n    failure =\n        `The YouTrack server could not be reached (URL: ${url}). Please check your network connection.`;\n  } else if (isYouTrackError(response)) {\n    failure =\n        `The YouTrack server returned the following error (URL: ${url}): ${response.error_description}`;\n  } else if (xhr.status === 200) {\n    resolve(response);\n    return;\n  } else {\n    failure = `The YouTrack server returned an unexpected error (URL: ${url}, HTTP status: ${xhr.status}).`;\n  }\n  reject(failure);\n}\n","import { strict as assert } from 'assert';\nimport { ProjectPlan, RetrieveProjectPlanOptions, YouTrackConfig, YouTrackIssue, } from './api-types';\nimport { assignDefined, OnlyOptionals } from './util';\nimport { httpGet, httpGetAll, httpGetAllWithOptions } from './you-track-http';\nimport * as RestApi from './you-track-rest';\nimport { CustomFieldActivityItem } from './you-track-rest';\n\n/**\n * Retrieves, reconstructs, and returns a project plan consisting of the issues and their activities in a\n * [YouTrack saved search](https://www.jetbrains.com/help/youtrack/standalone/Saved-Search.html).\n *\n * This method requires that {@link handlePotentialOauthRedirect}() was called previously and obtained an OAuth token.\n * The authorization should be valid for the expected duration of the data retrieval. YouTrack\n * [does not](https://www.jetbrains.com/help/youtrack/standalone/OAuth-Authorization.html#AuthServerResponse) issue\n * refresh tokens, so communication with YouTrack will fail otherwise.\n *\n * @param baseUrl The YouTrack base URL. See also {@link httpGet}().\n * @param youTrackConfig Configuration of YouTrack.\n * @param options Options for retrieving YouTrack issue data and building a project plan.\n * @return A promise that in case of success will be fulfilled with a project plan. In case of any failure, it will be\n *     rejected with a {@link Failure}.\n */\nexport function retrieveProjectPlan(\n    baseUrl: string, youTrackConfig: YouTrackConfig, options?: RetrieveProjectPlanOptions): Promise<ProjectPlan> {\n  const actualYouTrackConfig: Required<YouTrackConfig> = assignDefined(newDefaultYouTrackConfig(), youTrackConfig);\n  const actualOptions: Required<RetrieveProjectPlanOptions> =\n      assignDefined(newDefaultRequestProjectPlanOptions(), options);\n  return new YouTrackIssueActivities(baseUrl, actualYouTrackConfig, actualOptions).promise;\n}\n\n/**\n * Retrieves and returns the number of minutes in a work week, as configured in YouTrack.\n *\n * @param baseUrl The YouTrack base URL. See also {@link httpGet}().\n * @return A promise that in case of success will be fulfilled with a the number of minutes. In case of any failure, it\n *     will be rejected with a {@link Failure}.\n */\nexport async function getMinutesPerWorkWeek(baseUrl: string): Promise<number> {\n  const queryParams = {\n    fields: YouTrackFields.WORK_TIME_SETTINGS,\n  };\n  const response: RestApi.WorkTimeSettings =\n      await httpGet<RestApi.WorkTimeSettings>(baseUrl, RestApi.youTrackPath.WORK_TIME_SETTINGS, queryParams);\n  return response.daysAWeek * response.minutesADay;\n}\n\n/**\n * Returns a new object with values for the optional properties of {@link YouTrackConfig}.\n */\nfunction newDefaultYouTrackConfig(): OnlyOptionals<YouTrackConfig> {\n  return {\n    remainingEffortFieldId: '',\n    remainingWaitFieldId: '',\n    assigneeFieldId: '',\n    otherCustomFieldIds: [],\n    doesInwardDependOnOutward: true,\n    overlaySavedQueryId: '',\n    minStateChangeDurationMs: 0,\n    defaultRemainingEffortMs: 0,\n    defaultWaitTimeMs: 0,\n    isSplittableFn: () => false,\n  };\n}\n\n/**\n * Returns a new object with values for the optional properties of {@link RetrieveProjectPlanOptions}.\n */\nfunction newDefaultRequestProjectPlanOptions(): OnlyOptionals<RetrieveProjectPlanOptions> {\n  return {\n    progressCallback: () => { /* no-op */ },\n    omitIssueActivities: false,\n    progressUpdateIntervalMs: 200,\n    restBatchSize: 100,\n  };\n}\n\nconst YOUTRACK_CUSTOM_FIELDS_CATEGORY = 'CustomFieldCategory';\n\n/**\n * YouTrack REST API fields.\n */\nconst enum YouTrackFields {\n  SORTED_ISSUES = 'count',\n  CUSTOM_FIELD = 'fieldDefaults(bundle(id))',\n  STATE_BUNDLES = 'id,values(id,name,isResolved)',\n  SAVED_QUERY_NAME = 'name',\n  ISSUES = 'created,customFields(projectCustomField(field(id)),value(id,minutes,name)),id,idReadable,' +\n      'links(direction,issues(id,idReadable),linkType(id)),parent(issues(id,idReadable)),resolved,' +\n      'subtasks(issues(id,idReadable)),summary,updated',\n  OVERLAY_ORDER = 'id',\n  ACTIVITIES_PAGE = 'afterCursor,hasAfter,activities(added(id,name,isResolved),field(id),' +\n      'removed(id,name,isResolved),target(id),timestamp)',\n  WORK_TIME_SETTINGS = 'minutesADay,daysAWeek',\n}\n\nconst enum ActiveState {\n  UNKNOWN,\n  ACTIVE,\n  INACTIVE,\n}\n\ninterface StateTransition {\n  timestamp: number;\n  activeState: ActiveState;\n}\n\ninterface IssueId {\n  /**\n   * The human readable ID, consisting of project abbreviation and number.\n   */\n  id: string;\n\n  /**\n   * The YouTrack-internal ID.\n   */\n  internalId: string;\n}\n\ninterface InternalYouTrackIssue extends YouTrackIssue {\n  internalId: string;\n  parentIssueId: IssueId | null;\n  subtaskIssueIds: IssueId[];\n  dependencyIssueIds: IssueId[];\n  activeState: ActiveState;\n  stateTransitions: StateTransition[];\n  lastUpdate?: number;\n}\n\n/**\n * Class that retrieves issues, their state changes, and issue links.\n */\nclass YouTrackIssueActivities {\n  public readonly promise: Promise<ProjectPlan>;\n\n  private readonly baseUrl_: string;\n  private readonly config_: Required<YouTrackConfig>;\n  private readonly options_: Required<RetrieveProjectPlanOptions>;\n  private readonly dependsOnDirection_: 'INWARD' | 'OUTWARD';\n  private readonly issues_: InternalYouTrackIssue[] = [];\n  private readonly idToIssueMap_ = new Map<string, InternalYouTrackIssue>();\n  /**\n   * Map from id of the issue state (that is, the ID of the {@link StateBundleElement}) to whether that state is active.\n   *\n   * This property is only filled in {@link buildIdToActiveStateMap}() if\n   * {@link RetrieveProjectPlanOptions.omitIssueActivities} is false.\n   */\n  private readonly idToActiveState_: Map<string, ActiveState>;\n  private readonly lowerCaseNameToActiveState_: {[lowerCaseName: string]: ActiveState} = {};\n  private readonly projectPlan_: ProjectPlan;\n\n  private numIssues_: number = 0;\n  private savedQueryName_: string = '';\n  private numTasksWithDetails_: number = 0;\n  /**\n   * Timestamp of the first activity in the activity log.\n   *\n   * This property is only filled in {@link parseActivityItems}() if\n   * {@link RetrieveProjectPlanOptions.omitIssueActivities} is false.\n   */\n  private minTimeStamp_: number = 0;\n  private maxUpdateTimeStamp_: number = 0;\n  private maxActivityTimeStamp_: number = 0;\n  private lastProgressUpdate_: number = 0;\n\n  /**\n   * Constructor that will already start the communication with the YouTrack server.\n   */\n  constructor(\n      baseUrl: string, youTrackConfig: Required<YouTrackConfig>, options: Required<RetrieveProjectPlanOptions>) {\n    this.baseUrl_ = baseUrl;\n    this.config_ = youTrackConfig;\n    this.options_ = options;\n    this.dependsOnDirection_ = this.config_.doesInwardDependOnOutward ? 'INWARD' : 'OUTWARD';\n    this.idToActiveState_ = youTrackConfig.inactiveStateIds\n        .reduce((map, inactiveState) => map.set(inactiveState, ActiveState.INACTIVE), new Map<string, ActiveState>());\n    this.projectPlan_ = {\n      issues: [],\n      warnings: [],\n    };\n    this.promise = this.run();\n  }\n\n  private async run(): Promise<ProjectPlan> {\n    await this.retrieveNumIssues();\n    await this.retrieveSavedQueryName();\n    if (!this.options_.omitIssueActivities) {\n      const stateBundleId: string = await this.getStateBundleId();\n      await this.buildIdToActiveStateMap(stateBundleId);\n    }\n    this.progressUpdate();\n    await this.retrieveIssues();\n    await this.retrieveOverlayOrder();\n    if (!this.options_.omitIssueActivities) {\n      await this.retrieveActivities();\n    }\n    this.finalizeSchedule();\n    return this.projectPlan_;\n  }\n\n  /**\n   * If sufficient time has elapsed since the last progress update, send a new message to the thread that spawned this\n   * worker.\n   */\n  private progressUpdate(): void {\n    if (Date.now() - this.lastProgressUpdate_ < this.options_.progressUpdateIntervalMs) {\n      return;\n    }\n\n    let percentageDone = 0;\n    if (this.numIssues_ > 0) {\n      percentageDone =\n        1 +\n        9 * Math.min(1, this.numTasksWithDetails_ / this.numIssues_);\n      if (this.minTimeStamp_ > 0) {\n        percentageDone += 90 * Math.min(1,\n          (this.maxActivityTimeStamp_ - this.minTimeStamp_) / (this.maxUpdateTimeStamp_ - this.minTimeStamp_)\n        );\n      } else if (this.options_.omitIssueActivities) {\n        percentageDone *= 10;\n      }\n    }\n\n    this.lastProgressUpdate_ = Date.now();\n    this.options_.progressCallback(percentageDone);\n  }\n\n  private newHttpRequest<T>(resourcePath: string, queryParams: {[param: string]: string}): Promise<T> {\n    return httpGet(this.baseUrl_, resourcePath, queryParams);\n  }\n\n  private getAll<T>(resourcePath: string, queryParams: {[param: string]: string},\n        processBatch: (batch: T[]) => void): Promise<void> {\n    return httpGetAllWithOptions(this.baseUrl_, resourcePath, queryParams, this.options_.restBatchSize,\n        processBatch, undefined);\n  }\n\n  private async retrieveNumIssues(): Promise<void> {\n    const queryParams = {\n      folderId: this.config_.savedQueryId,\n      fields: YouTrackFields.SORTED_ISSUES,\n    };\n    const response: RestApi.SortedIssuesResponse =\n        await this.newHttpRequest(RestApi.youTrackPath.SORTED_ISSUES, queryParams);\n    this.numIssues_ = response.count;\n  }\n\n  private async getStateBundleId(): Promise<string> {\n    const queryParams = {fields: YouTrackFields.CUSTOM_FIELD};\n    const customField: RestApi.CustomField =\n        await this.newHttpRequest(RestApi.youTrackPath.CUSTOM_FIELD(this.config_.stateFieldId), queryParams);\n    return (customField.fieldDefaults as RestApi.StateBundleCustomFieldDefaults).bundle.id;\n  }\n\n  private async retrieveSavedQueryName(): Promise<void> {\n    const queryParams = {fields: YouTrackFields.SAVED_QUERY_NAME};\n    const savedQuery: RestApi.SavedQuery =\n        await this.newHttpRequest(RestApi.youTrackPath.SAVED_QUERY(this.config_.savedQueryId), queryParams);\n    this.savedQueryName_ = savedQuery.name;\n  }\n\n  private async buildIdToActiveStateMap(stateBundleId: string): Promise<void> {\n    const queryParams: {fields: string} = {\n      fields: YouTrackFields.STATE_BUNDLES,\n    };\n    await this.getAll<RestApi.StateBundle>(RestApi.youTrackPath.STATE_BUNDLES, queryParams, (restStateBundles) => {\n      for (const restStateBundle of restStateBundles) {\n        const isRelevantStateBundle = restStateBundle.id === stateBundleId;\n        for (const restElement of restStateBundle.values) {\n          if (restElement.isResolved) {\n            this.idToActiveState_.set(restElement.id, ActiveState.INACTIVE);\n          } else if (isRelevantStateBundle && !this.config_.inactiveStateIds.includes(restElement.id)) {\n            this.idToActiveState_.set(restElement.id, ActiveState.ACTIVE);\n          }\n\n          if (isRelevantStateBundle) {\n            // In this case, restElement.id was added to this.idToActiveState_: Either (a) in the constructor (if\n            // this.config_.inactiveStateIds.includes(restElement.id)) or (b) in one of the two if-branches above.\n            assert(this.idToActiveState_.has(restElement.id));\n            this.lowerCaseNameToActiveState_[restElement.name.toLowerCase()] =\n                this.idToActiveState_.get(restElement.id)!;\n          }\n        }\n      }\n    });\n  }\n\n  private parseIssueCustomFields(issue: InternalYouTrackIssue, restIssue: RestApi.Issue): void {\n    for (const customField of restIssue.customFields) {\n      const fieldId = customField.projectCustomField.field.id;\n      switch (fieldId) {\n        case this.config_.remainingEffortFieldId:\n          if (RestApi.isPeriodIssueCustomField(customField) && customField.value !== null) {\n            issue.remainingEffortMs = customField.value.minutes * 60 * 1000;\n          }\n          break;\n        case this.config_.remainingWaitFieldId:\n          if (RestApi.isPeriodIssueCustomField(customField) && customField.value !== null) {\n            issue.remainingWaitTimeMs = customField.value.minutes * 60 * 1000;\n          }\n          break;\n        case this.config_.assigneeFieldId:\n          if (RestApi.isSingleUserIssueCustomField(customField) && customField.value !== null) {\n            issue.assignee = customField.value.id;\n          }\n          break;\n        case this.config_.stateFieldId:\n          if (RestApi.isStateIssueCustomField(customField) && customField.value !== null) {\n            issue.state = customField.value.id;\n            issue.activeState = this.stateBundleElementIdToActiveState(customField.value);\n          }\n          break;\n        default:\n          if (RestApi.isSingleEnumIssueCustomField(customField) &&\n              customField.value !== null &&\n              this.config_.otherCustomFieldIds.find((id) => id === fieldId)) {\n            issue.customFields[fieldId] = customField.value.id;\n          }\n      }\n    }\n  }\n\n  private async retrieveIssues(): Promise<void> {\n    const queryParams = {fields: YouTrackFields.ISSUES};\n    await this.getAll<RestApi.Issue>(\n        RestApi.youTrackPath.ISSUES(this.config_.savedQueryId), queryParams, (restIssues) => {\n          for (const restIssue of restIssues) {\n            const issue: InternalYouTrackIssue = {\n              id: restIssue.idReadable,\n              remainingEffortMs: this.config_.defaultRemainingEffortMs,\n              remainingWaitTimeMs: this.config_.defaultWaitTimeMs,\n              splittable: false,\n              dependencies: [],\n              assignee: '',\n\n              summary: restIssue.summary,\n              issueActivities: [],\n              resolved: restIssue.resolved !== null\n                  ? restIssue.resolved\n                  : Number.MAX_SAFE_INTEGER,\n              state: '',\n              parent: '',\n              customFields: {},\n\n              internalId: restIssue.id,\n              parentIssueId: restIssue.parent.issues.length > 0\n                  ? {\n                      id: restIssue.parent.issues[0].idReadable,\n                      internalId: restIssue.parent.issues[0].id,\n                    }\n                  : null,\n              subtaskIssueIds: restIssue.subtasks.issues.map((subissue) => ({\n                id: subissue.idReadable,\n                internalId: subissue.id,\n              })),\n              dependencyIssueIds: [],\n              activeState: ActiveState.UNKNOWN,\n              stateTransitions: [{timestamp: restIssue.created, activeState: ActiveState.UNKNOWN}],\n              lastUpdate: restIssue.updated,\n            };\n            this.issues_.push(issue);\n            this.idToIssueMap_.set(restIssue.id, issue);\n\n            this.parseIssueCustomFields(issue, restIssue);\n\n            for (const restLink of restIssue.links) {\n              if (restLink.direction === this.dependsOnDirection_ &&\n                  restLink.linkType.id === this.config_.dependsLinkTypeId) {\n                issue.dependencyIssueIds.push(...restLink.issues.map((linkedIssue) => ({\n                  id: linkedIssue.idReadable,\n                  internalId: linkedIssue.id,\n                })));\n              }\n            }\n\n            ++this.numTasksWithDetails_;\n            this.maxUpdateTimeStamp_ = Math.max(this.maxUpdateTimeStamp_, restIssue.updated);\n          }\n          this.progressUpdate();\n        }\n    );\n  }\n\n  private async retrieveOverlayOrder(): Promise<void> {\n    if (this.config_.overlaySavedQueryId.length === 0) {\n      return;\n    }\n\n    const queryParams = {fields: YouTrackFields.OVERLAY_ORDER};\n    type IdIssue = Pick<RestApi.Issue, 'id'>;\n    const issues = await httpGetAll<IdIssue>(this.baseUrl_,\n        RestApi.youTrackPath.ISSUES(this.config_.overlaySavedQueryId), queryParams, this.options_.restBatchSize);\n    const overlayIds = issues.map((issue) => issue.id).filter((id) => this.idToIssueMap_.has(id));\n    const idToOverlayIdx = overlayIds.reduce((map, id, idx) => map.set(id, idx), new Map<string, number>());\n\n    let issueIdx = 0;\n    let overlayIdx = 0;\n    while (issueIdx < this.issues_.length && overlayIdx < overlayIds.length) {\n      const issue: InternalYouTrackIssue = this.issues_[issueIdx];\n      if (idToOverlayIdx.has(issue.internalId)) {\n        this.issues_[issueIdx] = this.idToIssueMap_.get(overlayIds[overlayIdx])!;\n        ++overlayIdx;\n      }\n      ++issueIdx;\n    }\n  }\n\n  private async retrieveActivities(): Promise<void> {\n    const queryParams: {[param: string]: string} = {\n      fields: YouTrackFields.ACTIVITIES_PAGE,\n      categories: YOUTRACK_CUSTOM_FIELDS_CATEGORY,\n      issueQuery: `saved search: {${this.savedQueryName_}}`,\n      $top: this.options_.restBatchSize.toString(),\n    };\n    let busy = true;\n    let promise = this.newHttpRequest<RestApi.ActivityCursorPage>(RestApi.youTrackPath.ACTIVITIES_PAGE, queryParams);\n    do {\n      const activitiesPage = await promise;\n      if (activitiesPage.hasAfter) {\n        queryParams.cursor = activitiesPage.afterCursor!;\n        promise = this.newHttpRequest<RestApi.ActivityCursorPage>(RestApi.youTrackPath.ACTIVITIES_PAGE, queryParams);\n      } else {\n        busy = false;\n      }\n      // The type-cast is fine because we set queryParams.categories accordingly.\n      this.parseActivityItems(activitiesPage.activities as CustomFieldActivityItem[]);\n      this.progressUpdate();\n    } while (busy);\n  }\n\n  private stateBundleElementIdToActiveState(\n      arrayOrObject?: RestApi.StateBundleElement | RestApi.StateBundleElement[]): ActiveState {\n    let object: RestApi.StateBundleElement | undefined;\n    if (arrayOrObject instanceof Array) {\n      object = arrayOrObject.length > 0 ? arrayOrObject[0] : undefined;\n    } else {\n      object = arrayOrObject;\n    }\n\n    if (object === undefined) {\n      return ActiveState.UNKNOWN;\n    }\n\n    if (object.isResolved) {\n      return ActiveState.INACTIVE;\n    } else if (this.idToActiveState_.has(object.id)) {\n      return this.idToActiveState_.get(object.id)!;\n    }\n\n    const lowerCaseName = object.name.toLowerCase();\n    if (lowerCaseName in this.lowerCaseNameToActiveState_) {\n      return this.lowerCaseNameToActiveState_[lowerCaseName];\n    }\n    return ActiveState.UNKNOWN;\n  }\n\n  private addStateTransition(stateTransitions: StateTransition[], newStateTransition: StateTransition,\n      replacementForPreviousUnknown: ActiveState): void {\n    const a = stateTransitions;\n    let n = a.length;\n    const c = this.config_.minStateChangeDurationMs;\n    // By definition, a is the array [a[0], ..., a[n - 1]]. With the abbreviating notation a[i].s ∈ {A,I,U} and\n    // a[i].t (instead of a[i].activeState and a[i].timestamp, respectively), if the following invariants hold here\n    // then they also hold when the function returns.\n    // (And the fact that the invariant holds the first time this method is called follows from method retrieveIssues().\n    // There, the array a was initialized with exactly one element such that a[0].s = U.)\n    // Throughout the explanatory comments, let n denote the length of a (even at the end of the function where the\n    // source code does not reassign n).\n    //\n    // 1. a[0].s, ..., a[n - 2].s ∈ {A,I}.\n    // 2. a[i - 1].s != a[i].s for all i = 1, ..., n - 1\n    // 3. n = 1 => (a[0].s ∈ {A,U} and n > 1 => a[0].s = A)\n    // 4. a[i - 1].t < a[i].t for all i = 1, ..., n - 1\n    // 5. a[i].t - a[i - 1].t >= c for all i = 1, ..., n - 3\n    // 6. a[n - 2].t - a[n - 3].t < c => (a[n - 1].t - a[n - 2].t < c and a[n - 2].s = I and a[n - 1].s = U)\n    // 7. a[n - 1].t - a[n - 2].t < c => a[n - 1].s ∈ {I,U}\n\n    // In the following, we first prepare a so that newStateTransition could be added without violating the\n    // invariants. Let s ∈ {A,I,U} denote the new state and t the new timestamp. That is,\n    // s = newStateTransition.activeState and t = newStateTransition.timestamp.\n\n    // The behavior of this function satisfies (with a and n denoting the respective values upon return, and a' and n'\n    // their current values, respectively):\n    // I. a[i].t - a[i-1].t < c => t - a[i].t < c\n    // II. (a'[n - 1].s ∈ {A,I} and s != a'[n - 1].s and t >= a'[n - 1].t + c)\n    //     => (a' = a[0 .. n - 2] and a[n - 1] = (t, s))\n\n    // Goal: Preserve invariant 4.\n    while (n > 0 && a[n - 1].timestamp >= newStateTransition.timestamp) {\n      a.pop();\n      --n;\n    }\n    // (Condition POST-WHILE:) We now have a[n - 1].t <= t. Also, all invariants hold.\n\n    // Goal: Preserve invariant 1.\n    if (n > 0 && a[n - 1].activeState === ActiveState.UNKNOWN) {\n      a[n - 1].activeState = replacementForPreviousUnknown !== ActiveState.UNKNOWN\n          ? replacementForPreviousUnknown\n          : ActiveState.ACTIVE;\n      // We now have (stronger than invariant 1!): a[0].s, ..., a[n - 1].s ∈ {A,I}.\n      //\n      // Goals:\n      // - Restore invariant 3 (if-condition before '||')\n      // - Restore invariant 2 (if-condition after '||')\n      // - Preserve invariant 5,6,7 (else-if-condition)\n      if ((n === 1 && a[0].activeState === ActiveState.INACTIVE) ||\n          (n > 1 && a[n - 1].activeState === a[n - 2].activeState)) {\n        a.pop();\n        --n;\n      } else if (n > 2 && a[n - 2].activeState === ActiveState.INACTIVE &&\n          a[n - 2].timestamp - a[n - 3].timestamp < c) {\n        // Note we have here: a[n - 1].s = A.\n        a.length -= 2;\n        n -= 2;\n        // We now have a[i].t - a[i - 1].t >= c for all i. Also, a[n - 1].s = A.\n      }\n    }\n    // (Condition NOUNKNOWN:) All invariants hold, and additionally a[n - 1].s ∈ {A,I} and a[i].t - a[i - 1].t >= c\n    // for i = 1, ..., n - 2.\n\n    // Goal: Preserve invariants 5,6,7.\n    if (n > 1 && a[n - 1].activeState === ActiveState.INACTIVE &&\n        a[n - 1].timestamp - a[n - 2].timestamp < c &&\n        newStateTransition.timestamp - a[n - 1].timestamp >= c) {\n      a.length -= 2;\n      n -= 2;\n    }\n    // (Condition GAPS1:) All invariants hold. It also holds now that (a[n - 1].t - a[n - 2].t < c) implies that the\n    // previous if-block was not entered (because 2 elements were removed from the list and therefore\n    // condition NOUNKNOWN would imply a[n - 1].t - a[n - 2].c >= c). Therefore one of the following holds:\n    // (1.) a[n - 1].s ∈ {A,U}, which together with condition NOUNKNOWN implies a[n - 1].s = A, or\n    // (2.) t - a[n - 1].t < c.\n\n    // Goal: Preserve invariant 2.\n    if (n > 0 && newStateTransition.activeState === a[n - 1].activeState) {\n      // All invariants still hold (due to condition GAPS1).\n      return;\n    }\n    // (Condition ALT:) All invariants hold. We also have now s != a[n - 1].s.\n\n    // Goal: Preserve invariants 5,6,7.\n    if (n > 1 && newStateTransition.activeState === ActiveState.ACTIVE &&\n        newStateTransition.timestamp - a[n - 1].timestamp < c) {\n      a.pop();\n      // Since n > 1, we have (due to invariant 3) that a[0].s = A. Therefore, invariant 3 remains\n      // valid. Other invariants trivially hold, because the last line cannot have invalidated them.\n      return;\n    }\n    // (Condition GAPS2:) All invariants hold. We also have now that n > 1 implies that (1.) s ∈ {I,U} or\n    // (2.) t - a[n - 1] >= c.\n\n    // Goal: Preserve invariant 3.\n    if (n > 0 || newStateTransition.activeState !== ActiveState.INACTIVE) {\n      a.push(newStateTransition);\n      // Let n = a.length (which changed in the last line).\n      // - Invariant 1 continues to hold because of condition NOUNKNOWN.\n      // - Invariant 2 continues to hold because of condition ALT.\n      // - Regarding invariant 3, if n = 1, then a[0] = s ∈ {A,U} because of the if-condition. If n = 2, then\n      //   a[0].s ∈ {A,U} due to invariant 3 holding before, and therefore a[0].s = A due to condition NOUNKNOWN.\n      //   If n > 2, then a[0].s = A because invariant 3 held before the last line.\n      // - Invariant 4 holds because a[n - 1].t <= t (due to condition POST-WHILE).\n      // - Invariant 5 holds because of condition NOUNKNOWN.\n      // - Regarding invariant 6, only the case n > 3 is meaningful (i.e., not a vacuous truth). Suppose that\n      //   a[n - 2].t - a[n - 3].t < c. Since invariant 7 held before, we know a[n - 2].s ∈ {I,U}. Together with\n      //   condition NOUNKNOWN, this implies a[n - 2].s = I. Condition GAPS2 implies a[n - 1].s = s ∈ {I,U}, and\n      //   condition ALT strengthens this to a[n - 1].s = U. Finally, due to condition GAPS1 (note that\n      //   a[n - 2].s ∉ {A,U}), we have a[n - 1].t - a[n - 2].t < c.\n      // - Regarding invariant 7, suppose a[n - 1].t - a[n - 2].t < c. Then s ∈ {I,U} due to condition GAPS2.\n    }\n  }\n\n  private parseActivityItems(activityItems: RestApi.CustomFieldActivityItem[]): void {\n    if (activityItems.length > 0) {\n      if (this.minTimeStamp_ === 0) {\n        this.minTimeStamp_ = activityItems[0].timestamp;\n      }\n      this.maxActivityTimeStamp_ =\n          Math.max(this.maxActivityTimeStamp_, activityItems[activityItems.length - 1].timestamp);\n    }\n    for (const activityItem of activityItems) {\n      if (activityItem.field.id === this.config_.stateFieldId) {\n        // In theory, multiple users can own saved queries with the same name, in which case we may see more issues here\n        // than we need to.\n        const issue = this.idToIssueMap_.get(activityItem.target.id);\n        if (issue === undefined) {\n          continue;\n        }\n\n        const newStateTransition = {\n          timestamp: activityItem.timestamp,\n          activeState: this.stateBundleElementIdToActiveState(activityItem.added as RestApi.StateBundleElement[]),\n        };\n        this.addStateTransition(issue.stateTransitions, newStateTransition,\n            this.stateBundleElementIdToActiveState(activityItem.removed as RestApi.StateBundleElement[]));\n      }\n    }\n  }\n\n  private finalizeSchedule(): void {\n    for (const issue of this.issues_) {\n      if (!this.options_.omitIssueActivities) {\n        this.finalizeIssueActivities(issue);\n      }\n\n      let parent: string = '';\n      if (issue.parentIssueId !== null) {\n        if (this.idToIssueMap_.has(issue.parentIssueId.internalId)) {\n          parent = issue.parentIssueId.id;\n        } else {\n          this.projectPlan_.warnings.push({\n            description: `Issue ${issue.id} is a subtask of ${issue.parentIssueId.id}, which is not contained ` +\n                `in saved search “${this.savedQueryName_}”.`,\n            issueId: issue.id,\n          });\n        }\n      }\n\n      const dependencies: string[] = [];\n      const unknownDependencies: string[] = [];\n      for (const issueId of issue.dependencyIssueIds) {\n        const pushTo = this.idToIssueMap_.has(issueId.internalId) ? dependencies : unknownDependencies;\n        pushTo.push(issueId.id);\n      }\n      if (unknownDependencies.length > 0) {\n        this.projectPlan_.warnings.push({\n          description: `Issue ${issue.id} depends on ${unknownDependencies.join(', ')}, which is/are not ` +\n              `contained in saved search “${this.savedQueryName_}”.`,\n          issueId: issue.id,\n        });\n      }\n\n      let remainingEffortMs = issue.resolved === Number.MAX_SAFE_INTEGER\n          ? issue.remainingEffortMs\n          : 0;\n      const unknownSubtasks: string[] = [];\n      for (const issueId of issue.subtaskIssueIds) {\n        const subIssue: InternalYouTrackIssue | undefined = this.idToIssueMap_.get(issueId.internalId);\n        if (subIssue !== undefined) {\n          remainingEffortMs = Math.max(0, remainingEffortMs - subIssue.remainingEffortMs);\n        } else {\n          unknownSubtasks.push(issueId.id);\n        }\n      }\n      if (unknownSubtasks.length > 0) {\n        this.projectPlan_.warnings.push({\n          description: `Issue ${issue.id} is a parent for ${unknownSubtasks.join(', ')}, which is/are not ` +\n              `contained in saved search “${this.savedQueryName_}”.`,\n          issueId: issue.id,\n        });\n      }\n\n      const youTrackIssue: YouTrackIssue = {\n        id: issue.id,\n        summary: issue.summary,\n        issueActivities: issue.issueActivities,\n        resolved: issue.resolved,\n        state: issue.state,\n        assignee: issue.assignee,\n        parent,\n        customFields: issue.customFields,\n        remainingEffortMs,\n        remainingWaitTimeMs: issue.resolved === Number.MAX_SAFE_INTEGER\n            ? issue.remainingWaitTimeMs\n            : 0,\n        splittable: issue.splittable,\n        dependencies,\n      };\n      youTrackIssue.splittable = this.config_.isSplittableFn(youTrackIssue);\n      this.projectPlan_.issues.push(youTrackIssue);\n    }\n  }\n\n  private finalizeIssueActivities(issue: InternalYouTrackIssue): void {\n    // The following 3 issue properties have been set before in finishedIssues().\n    const newStateTransition: StateTransition = {\n      timestamp: issue.lastUpdate!,\n      activeState: issue.activeState,\n    };\n    this.addStateTransition(issue.stateTransitions, newStateTransition, issue.activeState);\n    // Using the definitions in addStateTransition(), we could at this point still have a[n - 1].s = U or\n    // a[n - 1].t - a[n - 2].t < c. We therefore add the following final transition for \"clean up\".\n    // Note that we err on the side of interpreting state UNKNOWN as ACTIVE.\n    const finalStateTransition: StateTransition = {\n      timestamp: Number.MAX_SAFE_INTEGER,\n      activeState: issue.activeState === ActiveState.UNKNOWN\n          ? ActiveState.ACTIVE\n          : issue.activeState,\n    };\n    this.addStateTransition(issue.stateTransitions, finalStateTransition, ActiveState.ACTIVE);\n    assert(\n        issue.stateTransitions\n            .filter((stateTransition) => stateTransition.activeState === ActiveState.UNKNOWN).length === 0,\n        'issue.stateTransitions should no longer contain elements with activeState === ActiveState.UNKNOWN'\n    );\n    assert(\n        issue.stateTransitions\n            .map((stateTransition) => stateTransition.timestamp)\n            .reduce(\n                ([min, previousTimestamp], timestamp) => [Math.min(min, timestamp - previousTimestamp), timestamp],\n                [Number.MAX_SAFE_INTEGER, -this.config_.minStateChangeDurationMs]\n            )[0] >= this.config_.minStateChangeDurationMs,\n        'issue.stateTransitions should no longer have consecutive elements within less than minStateChangeDurationMs'\n    );\n\n    const a = issue.stateTransitions;\n    const n = a.length;\n    for (let i = 0; i < n; i += 2) {\n      issue.issueActivities.push({\n        assignee: issue.assignee,\n        start: a[i].timestamp,\n        end: i < n - 1 ? a[i + 1].timestamp : Number.MAX_SAFE_INTEGER,\n        isWaiting: false,\n      });\n    }\n  }\n}\n","export * from './api-types';\nexport * from './issue-forest';\nexport * from './scheduling';\nexport * from './you-track-http';\nexport * from './you-track-project-planning';\nexport * from './you-track-oauth';\n","import { strict as assert } from 'assert';\nimport {\n  appendSchedule,\n  Failure,\n  getMinutesPerWorkWeek,\n  goToOauthPage,\n  handlePotentialOauthRedirect,\n  httpGetAll,\n  isFailure,\n  IssueActivity,\n  ProgressCallback,\n  ProjectPlan,\n  retrieveProjectPlan,\n  Schedule,\n  scheduleUnresolved,\n  SchedulingOptions,\n  YouTrackConfig,\n  YouTrackIssue,\n} from '../main';\nimport {\n  CustomField,\n  EnumBundleCustomFieldDefaults,\n  IssueLinkType,\n  SavedQuery,\n  StateBundleCustomFieldDefaults,\n  User,\n} from '../main/you-track-rest';\n\n\n// Constants\n\nconst SOURCE_PARAM_NAME: string = 'src';\n\ntype AlertKind = 'success' | 'warning';\nconst ALERT_KINDS: readonly AlertKind[] = Object.freeze(['success', 'warning']);\n\n\n// HTML elements\n// Implied assumption here is this script is loaded after all of the following elements (the <script> element is at the\n// very end).\n\nconst feedback = document.getElementById('feedback') as HTMLDivElement;\nconst feedbackTitle: HTMLElement = feedback.querySelector('strong')!;\nconst feedbackMsg: HTMLElement = feedback.querySelector('span')!;\nconst inpBaseUrl = document.getElementById('baseUrl')! as HTMLInputElement;\nconst inpHubUrl = document.getElementById('hubUrl')! as HTMLInputElement;\nconst inpServiceId = document.getElementById('serviceId')! as HTMLInputElement;\nconst anchHubIntegrationLinks =\n    document.getElementsByClassName('hubIntegrationLink') as HTMLCollectionOf<HTMLAnchorElement>;\nconst spanCurrentUri = document.getElementById('currentUri')! as HTMLSpanElement;\nconst spanCurrentOrigin = document.getElementById('currentOrigin')! as HTMLSpanElement;\nconst anchHubConfiguration = document.getElementById('hubConfiguration')! as HTMLAnchorElement;\nconst anchGlobalSettingsLink = document.getElementById('globalSettingsLink')! as HTMLAnchorElement;\nconst btnConnect = document.getElementById('btnConnect')! as HTMLButtonElement;\nconst lstCustomFields = document.getElementById('customFields')! as HTMLUListElement;\nconst lstSavedQueries = document.getElementById('savedQueries')! as HTMLUListElement;\nconst lstIssueLinkTypes = document.getElementById('issueLinkTypes')! as HTMLUListElement;\nconst lstUsers = document.getElementById('users')! as HTMLUListElement;\nconst spanMinutesPerWorkWeek = document.getElementById('minutesPerWorkWeek')! as HTMLSpanElement;\nconst textYouTrackConfig = document.getElementById('youTrackConfig')! as HTMLTextAreaElement;\nconst textSchedulingOptions = document.getElementById('schedulingOptions')! as HTMLTextAreaElement;\nconst textIsSplittableFn = document.getElementById('isSplittableFn')! as HTMLTextAreaElement;\nconst btnPast = document.getElementById('btnPast')! as HTMLButtonElement;\nconst btnFuture = document.getElementById('btnFuture')! as HTMLButtonElement;\nconst divProgressBar = document.getElementById('progressBar')! as HTMLDivElement;\nconst preOutput = document.getElementById('output')! as HTMLPreElement;\n\n\n// Global state (sigh)\n\nlet hashFromShareLink: string = '';\nlet lastProjectPlan: ProjectPlan | undefined;\nlet previousNormalizedBaseUrl: string = toNormalizedUrl(inpBaseUrl.value);\n\n\ninterface AppState {\n  baseUrl: string;\n  hubUrl: string;\n  serviceId: string;\n  youTrackInstance: string;\n  schedulingOptions: string;\n  isSplittableFn: string;\n}\n\nfunction toNormalizedUrl(urlString: string): string {\n  try {\n    const url = new URL(urlString);\n    if (url.host.length === 0) {\n      // Oddly, Safari 12's implementation of the URL constructor does not throw on 'http:' or 'https:' whereas both\n      // Chrome and Firefox do.\n      return '';\n    } else if (url.pathname.length === 0 || url.pathname.charAt(url.pathname.length - 1) !== '/') {\n      url.pathname = url.pathname.concat('/');\n    }\n    return url.toString();\n  } catch (exception) {\n    if (!(exception instanceof TypeError)) {\n      throw exception;\n    }\n    return '';\n  }\n}\n\nfunction verifiedYouTrackConfig(): YouTrackConfig | undefined {\n  let youTrackConfig: YouTrackConfig;\n  try {\n    youTrackConfig = JSON.parse(textYouTrackConfig.value);\n  } catch (syntaxError) {\n    showAlert('Parsing YouTrackConfig failed.',\n        `The text field does not contain valid JSON. Problem: ${syntaxError.message}`, 'warning');\n    return undefined;\n  }\n\n  try {\n    youTrackConfig.isSplittableFn =\n        new Function('issue', textIsSplittableFn.value) as (issue: YouTrackIssue) => boolean;\n    return youTrackConfig;\n  } catch (syntaxError) {\n    showAlert('Parsing isSplittableFn failed.',\n        `The text field does not contain a valid JavaScript function body. Problem: ${syntaxError.message}`, 'warning');\n    return undefined;\n  }\n}\n\nfunction verifiedSchedulingOptions(): SchedulingOptions | undefined {\n  try {\n    return JSON.parse(textSchedulingOptions.value);\n  } catch (syntaxError) {\n    showAlert('Parsing SchedulingOptions failed.',\n        `The text field does not contain valid JSON. Problem: ${syntaxError.message}`, 'warning');\n    return undefined;\n  }\n}\n\nfunction hubUrlFromYouTrackBaseUrl(baseUrl: string): {hubUrl: string, isInCloudUrl: boolean} {\n  assert(baseUrl.length === 0 || baseUrl.endsWith('/'));\n\n  const inCloudMatch: RegExpMatchArray | null = baseUrl.match(/^(https:\\/\\/[^./]*\\.myjetbrains\\.com\\/)youtrack\\/$/);\n  let hubUrl: string;\n  let isInCloudUrl: boolean = false;\n  if (inCloudMatch !== null) {\n    // https://www.jetbrains.com/help/youtrack/incloud/OAuth-Authorization.html#HubOauthEndpoints\n    hubUrl = `${inCloudMatch[1]}hub`;\n    isInCloudUrl = true;\n  } else if (baseUrl.length > 0) {\n    // https://www.jetbrains.com/help/youtrack/standalone/OAuth-Authorization.html#HubOauthEndpoints\n    hubUrl = `${baseUrl}hub`;\n  } else {\n    hubUrl = '';\n  }\n  return {hubUrl, isInCloudUrl};\n}\n\nfunction onBaseUrlChanged() {\n  const normalizedBaseUrl = toNormalizedUrl(inpBaseUrl.value);\n  const {hubUrl, isInCloudUrl} = hubUrlFromYouTrackBaseUrl(normalizedBaseUrl);\n  inpHubUrl.disabled = isInCloudUrl;\n\n  if (inpHubUrl.value === '' || isInCloudUrl ||\n      inpHubUrl.value === hubUrlFromYouTrackBaseUrl(previousNormalizedBaseUrl).hubUrl) {\n    // The hub URL is currently the default one for the base URL. Keep in sync.\n    // If the current if-condition is not true, the user has modified the hub URL, so it shouldn't be updates.\n    previousNormalizedBaseUrl = normalizedBaseUrl;\n    inpHubUrl.value = hubUrl;\n  }\n}\n\nfunction foreach<T extends Element>(collection: HTMLCollectionOf<T>, fn: (element: T) => void) {\n  const length = collection.length;\n  for (let i = 0; i < length; ++i) {\n    fn(collection.item(i)!);\n  }\n}\n\nfunction onYouTrackConnectionParametersChanged() {\n  const normalizedBaseUrl: string = toNormalizedUrl(inpBaseUrl.value);\n  if (normalizedBaseUrl.length > 0) {\n    foreach(anchHubIntegrationLinks,\n        (anchor) => anchor.setAttribute('href', new URL('admin/ring', normalizedBaseUrl).toString()));\n    anchGlobalSettingsLink.setAttribute('href', new URL('admin/settings', normalizedBaseUrl).toString());\n  } else {\n    foreach(anchHubIntegrationLinks, (anchor) => anchor.removeAttribute('href'));\n    anchGlobalSettingsLink.removeAttribute('href');\n  }\n  if (normalizedBaseUrl.length > 0 && inpServiceId.value.length > 0) {\n    anchHubConfiguration.setAttribute('href',\n        new URL(`admin/hub/services/${inpServiceId.value}?tab=settings`, normalizedBaseUrl).toString());\n  } else {\n    anchHubConfiguration.removeAttribute('href');\n  }\n  const normalizedHubUrl: string = toNormalizedUrl(inpHubUrl.value);\n  btnConnect.disabled = normalizedBaseUrl.length === 0 || normalizedHubUrl.length === 0 ||\n      inpServiceId.value.length === 0;\n}\n\nfunction getAppState(): AppState {\n  return {\n    baseUrl: inpBaseUrl.value,\n    hubUrl: inpHubUrl.value,\n    serviceId: inpServiceId.value,\n    youTrackInstance: textYouTrackConfig.value,\n    schedulingOptions: textSchedulingOptions.value,\n    isSplittableFn: textIsSplittableFn.value,\n  };\n}\n\nfunction connect() {\n  // The button is only enabled if toNormalizedUrl(inpHubUrl.value).length > 0 returns a string.\n  goToOauthPage<AppState>(toNormalizedUrl(inpBaseUrl.value), toNormalizedUrl(inpHubUrl.value), inpServiceId.value,\n      getAppState());\n}\n\nasync function loadFromYouTrack<T>(baseUrl: string, relativePath: string, fields: string): Promise<T[]> {\n  return await httpGetAll<T>(baseUrl, relativePath, { fields }, 100);\n}\n\nfunction onReceivedYouTrackMetadata(baseUrl: string, customFields: CustomField[], savedQueries: SavedQuery[],\n    issueLinkTypes: IssueLinkType[], users: User[], minutesPerWorkWeek: number): void {\n  let customFieldsHtml: string = '';\n  for (const customField of customFields) {\n    customFieldsHtml += `<li>${customField.id}: ${customField.name}`;\n    if (customField.fieldType.id === 'state[1]') {\n      const fieldDefaults = customField.fieldDefaults as StateBundleCustomFieldDefaults;\n      if (fieldDefaults && fieldDefaults.bundle && fieldDefaults.bundle.values) {\n        const stateBundleElements = (customField.fieldDefaults as StateBundleCustomFieldDefaults).bundle.values\n            .sort((left, right) => left.ordinal - right.ordinal);\n        customFieldsHtml += '<ul>';\n        for (const stateBundleElement of stateBundleElements) {\n          customFieldsHtml += `<li>${stateBundleElement.id}: ${stateBundleElement.name}`;\n          if (stateBundleElement.isResolved) {\n            customFieldsHtml += ' (resolved)';\n          }\n          customFieldsHtml += '</li>';\n        }\n        customFieldsHtml += '</ul>';\n      }\n    } else if (customField.fieldType.id === 'enum[1]') {\n      const fieldDefaults = customField.fieldDefaults as EnumBundleCustomFieldDefaults;\n      if (fieldDefaults && fieldDefaults.bundle && fieldDefaults.bundle.values) {\n        const enumBundleElements = (customField.fieldDefaults as EnumBundleCustomFieldDefaults).bundle.values\n            .sort((left, right) => left.ordinal - right.ordinal);\n        customFieldsHtml += '<ul>';\n        for (const enumBundleElement of enumBundleElements) {\n          customFieldsHtml += `<li>${enumBundleElement.id}: ${enumBundleElement.name}`;\n        }\n        customFieldsHtml += '</ul>';\n      }\n    }\n    customFieldsHtml += '</li>';\n  }\n  lstCustomFields.innerHTML = customFieldsHtml;\n\n  lstSavedQueries.innerHTML = savedQueries\n      .map((savedQuery) => `<li>${savedQuery.id}: ${savedQuery.name} (${savedQuery.owner.fullName})</li>`)\n      .join('');\n\n  const issueLinkDetails = (issueLinkType: IssueLinkType) =>\n      issueLinkType.directed ? ` (${issueLinkType.sourceToTarget} → ${issueLinkType.targetToSource})` : '';\n  lstIssueLinkTypes.innerHTML = issueLinkTypes\n      .map((issueLinkType) =>\n          `<li>${issueLinkType.id}: ${issueLinkType.name}${issueLinkDetails(issueLinkType)}</li>`)\n      .join('');\n  lstUsers.innerHTML = users.map((user) =>\n      '<li>' +\n        `<img src=\"${new URL(user.avatarUrl, baseUrl).toString()}\" ` +\n          `width=\"24\" height=\"24\" alt=\"${user.fullName}\"/> ${user.id}: ${user.fullName}` +\n      '</li>')\n      .join('');\n  spanMinutesPerWorkWeek.textContent = minutesPerWorkWeek.toString();\n}\n\nfunction currentUri(): URL {\n  const uri = new URL(window.location.href);\n  uri.hash = '';\n  uri.username = '';\n  uri.password = '';\n  uri.search = '';\n  return uri;\n}\n\nfunction currentOrigin(): URL {\n  const uri = currentUri();\n  uri.pathname = '';\n  return uri;\n}\n\nfunction showAlert(title: string, message: string, alertKind: 'success' | 'warning'): void {\n  feedbackTitle.innerText = title;\n  feedbackMsg.innerText = message;\n  feedback.classList.remove(...ALERT_KINDS.map((otherAlertKind) => `alert-${otherAlertKind}`));\n  feedback.classList.add(`alert-${alertKind}`);\n  feedback.classList.toggle('show', true);\n}\n\nfunction hideAlert() {\n  feedback.classList.toggle('show', false);\n}\n\nfunction shareLink(): void {\n  const json: string = JSON.stringify(getAppState());\n  window.location.replace(`#${SOURCE_PARAM_NAME}=${encodeURIComponent(json)}`);\n  hashFromShareLink = window.location.hash;\n  let decodedHash: string | undefined;\n  try {\n    decodedHash = decodeURIComponent(hashFromShareLink);\n  } catch (ignoredUriError) { /* ignored */ }\n  let title: string;\n  let message: string;\n  let alertKind: AlertKind;\n  if (decodedHash === undefined || decodedHash.slice(2 + SOURCE_PARAM_NAME.length) !== json) {\n    title = 'Sharing failed.';\n    message = 'Text buffer too large to share.';\n    alertKind = 'warning';\n  } else {\n    title = 'Sharable URL created.';\n    message = 'Shareable link now in address bar.';\n    alertKind = 'success';\n  }\n  showAlert(title, message, alertKind);\n}\n\nfunction loadAppState(appState: AppState): void {\n  inpBaseUrl.value = appState.baseUrl;\n  inpHubUrl.value = appState.hubUrl;\n  inpServiceId.value = appState.serviceId;\n  previousNormalizedBaseUrl = toNormalizedUrl(appState.baseUrl);\n  onBaseUrlChanged();\n  onYouTrackConnectionParametersChanged();\n\n  textYouTrackConfig.value = appState.youTrackInstance;\n  textSchedulingOptions.value = appState.schedulingOptions;\n  textIsSplittableFn.value = appState.isSplittableFn;\n}\n\nfunction loadFromHash(): void {\n  // Ignore change of hash (once) if the hash is the one previously set in shareLink().\n  if (window.location.hash === hashFromShareLink) {\n    hashFromShareLink = '';\n    return;\n  }\n\n  const urlSearchParams = new URLSearchParams(window.location.hash.slice(1));\n  const queryParams = new Map<string, string>(urlSearchParams.entries());\n  const encodedJson: string | undefined = queryParams.get(SOURCE_PARAM_NAME);\n  if (encodedJson !== undefined) {\n    try {\n      loadAppState(JSON.parse(decodeURIComponent(encodedJson)));\n    } catch (ignoredUriError) {\n      showAlert('Invalid URL.', 'Cannot parse the given URL.', 'warning');\n      return;\n    }\n  }\n}\n\nfunction throwIfFailure<T>(valueOrFailure: T | Failure): T {\n  if (isFailure(valueOrFailure)) {\n    throw valueOrFailure;\n  } else {\n    return valueOrFailure;\n  }\n}\n\nfunction humanReadableTimestamps(projectPlan: ProjectPlan): void {\n  interface IsoTimestampedIssue {\n    $resolved: string;\n  }\n  interface IsoTimestampedIssueActivity {\n    $start: string;\n    $end: string;\n  }\n\n  for (const issue of projectPlan.issues) {\n    if (issue.resolved !== Number.MAX_SAFE_INTEGER) {\n      (issue as YouTrackIssue & IsoTimestampedIssue).$resolved = new Date(issue.resolved).toISOString();\n    }\n    for (const issueActivity of issue.issueActivities) {\n      const timestampedIssueActivity = issueActivity as IssueActivity & IsoTimestampedIssueActivity;\n      timestampedIssueActivity.$start = new Date(issueActivity.start).toISOString();\n      timestampedIssueActivity.$end = new Date(issueActivity.end).toISOString();\n    }\n  }\n}\n\nasync function computePrediction(schedulingOptions: SchedulingOptions): Promise<void> {\n  if (lastProjectPlan === undefined) {\n    return;\n  }\n\n  try {\n    const schedule: Schedule = await scheduleUnresolved(lastProjectPlan.issues, schedulingOptions);\n    const finalProjectPlan: ProjectPlan = throwIfFailure(appendSchedule(lastProjectPlan, schedule, Date.now()));\n    humanReadableTimestamps(finalProjectPlan);\n    preOutput.textContent = JSON.stringify(finalProjectPlan, null, 2);\n    hideAlert();\n  } catch (exception) {\n    if (isFailure(exception)) {\n      showAlert('Project planning failed.', exception, 'warning');\n    } else {\n      showAlert('Project planning failed.',\n          `The scheduling options may not be valid. Problem (${exception.name}): ${exception.message}`, 'warning');\n    }\n  }\n}\n\nasync function computePastProjectPlanAndPrediction(baseUrl: string, youTrackConfig: YouTrackConfig,\n    schedulingOptions: SchedulingOptions): Promise<void> {\n  try {\n    const progressCallback: ProgressCallback = (percentageDone) => {\n      const rounded: number = Math.floor(percentageDone);\n      divProgressBar.setAttribute('aria-valuenow', rounded.toString());\n      divProgressBar.style.width = `${rounded}%`;\n    };\n    lastProjectPlan = await retrieveProjectPlan(baseUrl, youTrackConfig, {progressCallback});\n    btnFuture.disabled = false;\n  } catch (exception) {\n    if (isFailure(exception)) {\n      showAlert('Reconstructing project plan failed.', exception, 'warning');\n    } else {\n      showAlert('Reconstructing project plan failed.',\n          `The YouTrack configuration may not be valid. Problem (${exception.name}): ${exception.message}`, 'warning');\n    }\n    return;\n  }\n\n  await computePrediction(schedulingOptions);\n}\n\nfunction scheduleFromActivityLog(): void {\n  const baseUrl: string = toNormalizedUrl(inpBaseUrl.value);\n  const youTrackConfig: YouTrackConfig | undefined = verifiedYouTrackConfig();\n  const schedulingOptions: SchedulingOptions | undefined = verifiedSchedulingOptions();\n  if (baseUrl.length === 0 || youTrackConfig === undefined || schedulingOptions === undefined) {\n    return;\n  }\n\n  (divProgressBar.parentNode as HTMLElement).classList.remove('d-none');\n  btnPast.disabled = true;\n  btnFuture.disabled = true;\n  computePastProjectPlanAndPrediction(baseUrl, youTrackConfig, schedulingOptions).finally(() => {\n    (divProgressBar.parentNode as HTMLElement).classList.add('d-none');\n    divProgressBar.setAttribute('aria-valuenow', '0');\n    divProgressBar.style.width = '0';\n    btnPast.disabled = false;\n    btnFuture.disabled = lastProjectPlan === undefined;\n  });\n}\n\nfunction predict(): void {\n  const schedulingOptions: SchedulingOptions | undefined = verifiedSchedulingOptions();\n  if (schedulingOptions === undefined) {\n    return;\n  }\n\n  btnPast.disabled = true;\n  btnFuture.disabled = true;\n  computePrediction(schedulingOptions).finally(() => {\n    btnPast.disabled = false;\n    btnFuture.disabled = lastProjectPlan === undefined;\n  });\n}\n\nfunction freshAppState() {\n  const youTrackInstance: YouTrackConfig = {\n    stateFieldId: '1-1',\n    inactiveStateIds: ['2-1'],\n    remainingEffortFieldId: '1-2',\n    remainingWaitFieldId: '1-3',\n    assigneeFieldId: '1-4',\n    otherCustomFieldIds: ['1-5'],\n    dependsLinkTypeId: '3-1',\n    doesInwardDependOnOutward: true,\n    savedQueryId: '4-1',\n    overlaySavedQueryId: '4-2',\n    minStateChangeDurationMs: 3600000,\n    defaultRemainingEffortMs: 0,\n    defaultWaitTimeMs: 0,\n  };\n  const schedulingOptions: SchedulingOptions = {\n    contributors: [{\n      id: '0-0',\n      minutesPerWeek: 2400,\n      numMembers: 1,\n    }],\n    resolutionMs: 3600000,\n    minActivityDuration: 1,\n  };\n  const appState: AppState = {\n    baseUrl: '',\n    hubUrl: '',\n    serviceId: '',\n    youTrackInstance: JSON.stringify(youTrackInstance, undefined, 2),\n    schedulingOptions: JSON.stringify(schedulingOptions, undefined, 2),\n    isSplittableFn: \"return issue.customFields['1-5'] === '5-1';\",\n  };\n  loadAppState(appState);\n}\n\nfunction resumeFromAppState(appState: AppState) {\n  loadAppState(appState);\n  // Not bullet-proof, but enough for this demo. We should only get here if the base URL is valid.\n  const actualBaseUrl: string = toNormalizedUrl(inpBaseUrl.value);\n  Promise\n      .all([\n        loadFromYouTrack<CustomField>(\n            actualBaseUrl,\n            'api/admin/customFieldSettings/customFields',\n            'fieldDefaults(bundle(id,values(id,name,isResolved,ordinal))),fieldType(id),id,name'\n        ),\n        loadFromYouTrack<SavedQuery>(\n            actualBaseUrl,\n            'api/savedQueries',\n            'id,name,owner(fullName)'\n        ),\n        loadFromYouTrack<IssueLinkType>(\n            actualBaseUrl,\n            'api/issueLinkTypes',\n            'directed,id,name,sourceToTarget,targetToSource'\n        ),\n        loadFromYouTrack<User>(\n            actualBaseUrl,\n            'api/admin/users',\n            'avatarUrl,id,fullName'\n        ),\n        getMinutesPerWorkWeek(actualBaseUrl),\n    ])\n    .then((array) => onReceivedYouTrackMetadata(actualBaseUrl, ...array))\n    .catch((error) => {\n      if (isFailure(error)) {\n        showAlert('Loading YouTrack settings failed.', error, 'warning');\n      } else {\n        showAlert('Loading YouTrack settings failed.', `Problem (${error.name}): ${error.message}`, 'warning');\n      }\n    });\n}\n\n\n// Set up events\n\ninpBaseUrl.addEventListener('input', onBaseUrlChanged);\ninpBaseUrl.addEventListener('input', onYouTrackConnectionParametersChanged);\ninpHubUrl.addEventListener('input', onYouTrackConnectionParametersChanged);\ninpServiceId.addEventListener('input', onYouTrackConnectionParametersChanged);\nbtnConnect.onclick = connect;\nbtnPast.onclick = scheduleFromActivityLog;\nbtnFuture.onclick = predict;\ndocument.getElementById('btnShare')!.onclick = shareLink;\ndocument.querySelectorAll('button.close[data-dismiss=\"alert\"]').forEach((element: Element) => {\n  const alert: Element | null = element.closest('.alert[role=\"alert\"]');\n  const button = element as HTMLButtonElement;\n  if (alert !== null) {\n    button.onclick = () => {\n      alert.classList.toggle('show', false);\n    };\n  }\n});\nwindow.onhashchange = loadFromHash;\n\n\n// Initialization\nspanCurrentUri.textContent = currentUri().toString();\nspanCurrentOrigin.textContent = currentOrigin().toString();\n// Unfortunate workaround for Safari.\n// https://github.com/fschopp/project-planning-for-you-track/issues/1\nconst DELAY_BEFORE_ACCESSING_SESSION_STORAGE_MS = 50;\nwindow.setTimeout(() => {\n  const previousState: AppState | undefined = handlePotentialOauthRedirect<AppState>();\n  if (previousState === undefined) {\n    freshAppState();\n  } else {\n    resumeFromAppState(previousState);\n  }\n  loadFromHash();\n}, DELAY_BEFORE_ACCESSING_SESSION_STORAGE_MS);\n"]}